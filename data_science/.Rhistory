max(quat$w[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[1,1,1:oMTMax] + quat$w[1:oMTMax], rev(quat$w[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[1,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$w[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[w] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$x[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[x] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$x[1:oMTMax]) - plot_limit_offset,
max(quat$x[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[2,1,1:oMTMax] + quat$x[1:oMTMax], rev(quat$x[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[2,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$x[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[x] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$y[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[y] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$y[1:oMTMax]) - plot_limit_offset,
max(quat$y[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[3,1,1:oMTMax] + quat$y[1:oMTMax], rev(quat$y[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[3,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$y[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[y] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$z[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[z] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$z[1:oMTMax]) - plot_limit_offset,
max(quat$z[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[4,1,1:oMTMax] + quat$z[1:oMTMax], rev(quat$z[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[4,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$z[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[z] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(deg2rad(imkDf$imu_pitch_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[x]), ylab = expression(omega[x] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[5,1:oMTMax], deg2rad(imkDf$imu_pitch_velocity[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[5,1:oMTMax], deg2rad(imkDf$imu_pitch_velocity[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] + fkfGuanglongOrientationModel$att[5,1:oMTMax], rev(fkfGuanglongOrientationModel$att[5,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[5,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_pitch_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[x] ~ " state"), expression("imu " ~ omega[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_roll_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[y]), ylab = expression(omega[y] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[6,1:oMTMax], deg2rad(imkDf$imu_roll_velocity[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[6,1:oMTMax], deg2rad(imkDf$imu_roll_velocity[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] + fkfGuanglongOrientationModel$att[6,1:oMTMax], rev(fkfGuanglongOrientationModel$att[6,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[6,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_roll_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[y] ~ " state"), expression("imu " ~ omega[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_yaw_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[z]), ylab = expression(omega[z] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[7,1:oMTMax], deg2rad(imkDf$imu_yaw_velocity[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[7,1:oMTMax], deg2rad(imkDf$imu_yaw_velocity[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] + fkfGuanglongOrientationModel$att[7,1:oMTMax], rev(fkfGuanglongOrientationModel$att[7,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[7,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_yaw_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[z] ~ " state"), expression("imu " ~ omega[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot_limit_offset = 0.5
plot(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[x] ~ " for data"), ylab = expression(p[x] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] + fkfGuanglongAccelerationModel$att[1,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[1,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[1,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[x] ~ " state"), expression("kinect " ~ p[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[2,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[x]), ylab = expression(v[x] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[2,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[2,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[2,2,1:aMTMax] + fkfGuanglongAccelerationModel$att[2,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[2,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[2,2,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[2,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[x] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.x[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[x] ~ " for data"), ylab = expression(a[x] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.x[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.x[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] + fkfGuanglongAccelerationModel$att[3,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[3,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[3,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.x[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[x] ~ " state"), expression("imu " ~ a[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[y] ~ " for data"), ylab = expression(p[y] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] + fkfGuanglongAccelerationModel$att[4,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[4,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[4,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[5,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[x]), ylab = expression(v[y] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[5,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[5,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[5,5,1:aMTMax] + fkfGuanglongAccelerationModel$att[5,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[5,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[5,5,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[5,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[y] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.y[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[y] ~ " for data"), ylab = expression(a[y] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.y[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.y[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] + fkfGuanglongAccelerationModel$att[6,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[6,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[6,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.y[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[y] ~ " state"), expression("imu " ~ a[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[z] ~ " for data"), ylab = expression(p[z] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] + fkfGuanglongAccelerationModel$att[7,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[7,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[7,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[8,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[z]), ylab = expression(v[z] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[8,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[8,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[8,8,1:aMTMax] + fkfGuanglongAccelerationModel$att[8,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[8,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[8,8,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[8,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[z] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.z[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[z] ~ " for data"), ylab = expression(a[z] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.z[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.z[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] + fkfGuanglongAccelerationModel$att[9,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[9,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[9,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.z[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[z] ~ " state"), expression("imu " ~ a[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
#install.packages("RMThreshold")
#install.packages("jsonlite")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("patchwork")
#install.packages("reshape2")
#install.packages("RSpincalc")
#install.packages("LaplacesDemon")
#install.packages('Rcpp')
#install.packages('KFK')
#install.packages("shiny")
library(shiny)
library(dplyr)
library(RMThreshold)
library(ggplot2)
library(RSpincalc)
library(reshape2)
library(LaplacesDemon)
library(Rcpp)
library(FKF)
source(paste(params$base_import_path, "/scripts/functions.R",sep=""))
Ts = params$T_s
# Will need euler angle velocity sensor
source(paste(params$base_import_path, "/scripts/models.R",sep=""))
imkDfRaw = read.csv2(paste(params$base_import_path, params$data_import_path, sep=""))
# Zeit in Millisekunden ?bersetzen
imkDfRaw$t = (imkDfRaw$t.m * 60 * 1000 + imkDfRaw$t.s * 1000 + imkDfRaw$t.ms)
# Erstelle Data Frame f?r kinect daten
# Darauf achten das datens?tze gleiche L?nge aufweisen
imkDf = imkDfRaw[abs(imkDfRaw$kinect_foot_right.x) > 0,]
initial_orientation_state = c(
params$x_initial_state_q0,
params$x_initial_state_q1,
params$x_initial_state_q2,
params$x_initial_state_q3,
params$x_initial_state_euler_vx,
params$x_initial_state_euler_vy,
params$x_initial_state_euler_vz
)
initial_orientation_belief = diag(
c(
params$initial_belief_00_q0,
params$initial_belief_11_q1,
params$initial_belief_22_q2,
params$initial_belief_33_q3,
params$initial_belief_44_euler_vx,
params$initial_belief_55_euler_vy,
params$initial_belief_66_euler_vz
)
)
orientation_process_noise = data.frame(
vx = params$process_noise_orientation_angular_velocity_sigma_x,
vy = params$process_noise_orientation_angular_velocity_sigma_y,
vz = params$process_noise_orientation_angular_velocity_sigma_z
)
orientation_sensor_noise = data.frame(
vx = params$sensor_noise_imu_euler_velocity_x,
vy = params$sensor_noise_imu_euler_velocity_y,
vz = params$sensor_noise_imu_euler_velocity_z
)
#
processOrientationModel = getGuanglongOrientationModel(Ts, initial_orientation_state, initial_orientation_belief, orientation_process_noise, orientation_sensor_noise)
rotationMatrix = quaternion_rotation_matrix(
imkDf$kinect_hand_right_orientation.w,
imkDf$kinect_hand_right_orientation.x,
imkDf$kinect_hand_right_orientation.y,
imkDf$kinect_hand_right_orientation.z
)
initial_matrixHandToLocal = data.frame(
mx_x = rotationMatrix[1,1], my_x = rotationMatrix[1,2], mz_x = rotationMatrix[1,3],
mx_y = rotationMatrix[2,1], my_y = rotationMatrix[2,2], mz_y = rotationMatrix[2,3],
mx_z = rotationMatrix[3,1], my_z = rotationMatrix[3,2], mz_z = rotationMatrix[3,3]
)
# Von Imu zu Kinect Punktspiegelung an z,y ebenen
gravity = data.frame(
x = imkDf$imu_gravity.x,
y = -imkDf$imu_gravity.z,
z = -imkDf$imu_gravity.y
)
initial_acceleration_state = c(
params$x_initial_state_px,
params$x_initial_state_vx,
params$x_initial_state_ax,
params$x_initial_state_py,
params$x_initial_state_vy,
params$x_initial_state_ay,
params$x_initial_state_pz,
params$x_initial_state_vz,
params$x_initial_state_az
)
initial_acceleration_belief = diag(c(
params$initial_belief_px_00,
params$initial_belief_vx_11,
params$initial_belief_ax_22,
params$initial_belief_py_33,
params$initial_belief_vy_44,
params$initial_belief_ay_55,
params$initial_belief_pz_66,
params$initial_belief_vz_77,
params$initial_belief_az_88
))
acceleration_process_noise = data.frame(
x = params$process_noise_acceleration_noise_omega_x,
y = params$process_noise_acceleration_noise_omega_y,
z = params$process_noise_acceleration_noise_omega_z
)
acceleration_sensor_noise = data.frame(
x = params$sensor_noise_kinect_sigma_x,
y = params$sensor_noise_kinect_sigma_y,
z = params$sensor_noise_kinect_sigma_z,
ax = params$sensor_noise_imu_sigma_x,
ay = params$sensor_noise_imu_sigma_y,
az = params$sensor_noise_imu_sigma_z
)
processAccelerationModel = getGuanglongAccelerationModel(Ts, initial_acceleration_state, initial_acceleration_belief, initial_matrixHandToLocal, gravity[1,], acceleration_process_noise, acceleration_sensor_noise)
oMTMax = 500 # orientationModelTimeMaximum
kinect_head_to_wrist_quat = quaternion_head_to_right_hand_chain(imkDf)
fkfGuanglongOrientationModel = fkf(
a0 = processOrientationModel$x[,1],
P0 = processOrientationModel$P,
dt = matrix(data = 0, nrow = 7, ncol = 1),
ct = matrix(data = 0, nrow = 3, ncol = 1),
GGt = diag(nrow = 3, ncol = 3),
Zt = processOrientationModel$H,
Tt = array(as.numeric(unlist(lapply(1:oMTMax,orientation_transition_at_index))), dim=c(7, 7, oMTMax)),
HHt = processOrientationModel$Q,
yt = matrix(data = c(
deg2rad(imkDf$imu_pitch_velocity[1:oMTMax]),
deg2rad(imkDf$imu_roll_velocity[1:oMTMax]),
deg2rad(imkDf$imu_yaw_velocity[1:oMTMax])
), nrow = 3, ncol = oMTMax, byrow = TRUE)
)
normalized_kalman_imu_Quat = normalizeQuaternion(
fkfGuanglongOrientationModel$att[1,],
fkfGuanglongOrientationModel$att[2,],
fkfGuanglongOrientationModel$att[3,],
fkfGuanglongOrientationModel$att[4,]
)
aMTMax = oMTMax # accelerationModelTimeMaximum
gravity = gravity * 9.81
# Von Imu zu Kinect Punktspiegelung an z,y ebenen
temporary_var = imkDf$imu_acceleration.y
imkDf$imu_acceleration.y[1:oMTMax] = -imkDf$imu_acceleration.z[1:oMTMax]
imkDf$imu_acceleration.z[1:oMTMax] = -temporary_var[1:oMTMax]
quat = normalized_kalman_imu_Quat
fkfGuanglongAccelerationModel = fkf(
a0 = processAccelerationModel$x[,1],
P0 = processAccelerationModel$P,
dt = matrix(data = c(
-gravity$x[1:oMTMax] * Ts**2/2,
-gravity$x[1:oMTMax] * Ts,
rep(0,times=aMTMax),
-gravity$y[1:oMTMax] * Ts**2/2,
-gravity$y[1:oMTMax] * Ts,
gravity$y[1:oMTMax],
-gravity$z[1:oMTMax] * Ts**2/2,
-gravity$z[1:oMTMax] * Ts,
rep(0,times=aMTMax)
), nrow = 9, ncol = aMTMax, byrow = TRUE),
ct = matrix(data = c(0,0,0,0,0,0), nrow = 6, ncol = 1),
GGt = diag(6),
Zt = processAccelerationModel$H,
Tt = array(as.numeric(unlist(lapply(1:aMTMax,acceleration_transition_at_index))), dim=c(9, 9, aMTMax)),
HHt = processAccelerationModel$Q,
yt = matrix(data = c(
imkDf$kinect_hand_right.x[1:aMTMax],
imkDf$kinect_hand_right.y[1:aMTMax],
imkDf$kinect_hand_right.z[1:aMTMax],
imkDf$imu_acceleration.x[1:oMTMax],
imkDf$imu_acceleration.y[1:oMTMax],
imkDf$imu_acceleration.z[1:oMTMax]
), nrow = 6, ncol = aMTMax, byrow = TRUE)
)
plot_limit_offset = 0.05
plot(quat$w[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[w] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$w[1:oMTMax]) - plot_limit_offset,
max(quat$w[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[1,1,1:oMTMax] + quat$w[1:oMTMax], rev(quat$w[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[1,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$w[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[w] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$x[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[x] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$x[1:oMTMax]) - plot_limit_offset,
max(quat$x[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[2,1,1:oMTMax] + quat$x[1:oMTMax], rev(quat$x[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[2,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$x[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[x] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$y[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[y] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$y[1:oMTMax]) - plot_limit_offset,
max(quat$y[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[3,1,1:oMTMax] + quat$y[1:oMTMax], rev(quat$y[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[3,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$y[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[y] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$z[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[z] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$z[1:oMTMax]) - plot_limit_offset,
max(quat$z[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[4,1,1:oMTMax] + quat$z[1:oMTMax], rev(quat$z[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[4,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$z[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[z] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(deg2rad(imkDf$imu_pitch_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[x]), ylab = expression(omega[x] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[5,1:oMTMax], deg2rad(imkDf$imu_pitch_velocity[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[5,1:oMTMax], deg2rad(imkDf$imu_pitch_velocity[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] + fkfGuanglongOrientationModel$att[5,1:oMTMax], rev(fkfGuanglongOrientationModel$att[5,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[5,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_pitch_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[x] ~ " state"), expression("imu " ~ omega[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_roll_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[y]), ylab = expression(omega[y] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[6,1:oMTMax], deg2rad(imkDf$imu_roll_velocity[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[6,1:oMTMax], deg2rad(imkDf$imu_roll_velocity[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] + fkfGuanglongOrientationModel$att[6,1:oMTMax], rev(fkfGuanglongOrientationModel$att[6,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[6,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_roll_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[y] ~ " state"), expression("imu " ~ omega[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_yaw_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[z]), ylab = expression(omega[z] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[7,1:oMTMax], deg2rad(imkDf$imu_yaw_velocity[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[7,1:oMTMax], deg2rad(imkDf$imu_yaw_velocity[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] + fkfGuanglongOrientationModel$att[7,1:oMTMax], rev(fkfGuanglongOrientationModel$att[7,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[7,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_yaw_velocity[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[z] ~ " state"), expression("imu " ~ omega[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot_limit_offset = 0.5
plot(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[x] ~ " for data"), ylab = expression(p[x] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] + fkfGuanglongAccelerationModel$att[1,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[1,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[1,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[x] ~ " state"), expression("kinect " ~ p[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[2,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[x]), ylab = expression(v[x] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[2,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[2,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[2,2,1:aMTMax] + fkfGuanglongAccelerationModel$att[2,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[2,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[2,2,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[2,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[x] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.x[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[x] ~ " for data"), ylab = expression(a[x] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.x[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.x[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] + fkfGuanglongAccelerationModel$att[3,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[3,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[3,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.x[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[x] ~ " state"), expression("imu " ~ a[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[y] ~ " for data"), ylab = expression(p[y] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] + fkfGuanglongAccelerationModel$att[4,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[4,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[4,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[5,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[x]), ylab = expression(v[y] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[5,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[5,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[5,5,1:aMTMax] + fkfGuanglongAccelerationModel$att[5,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[5,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[5,5,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[5,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[y] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.y[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[y] ~ " for data"), ylab = expression(a[y] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.y[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.y[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] + fkfGuanglongAccelerationModel$att[6,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[6,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[6,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.y[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[y] ~ " state"), expression("imu " ~ a[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[z] ~ " for data"), ylab = expression(p[z] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] + fkfGuanglongAccelerationModel$att[7,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[7,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[7,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[8,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[z]), ylab = expression(v[z] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[8,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[8,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[8,8,1:aMTMax] + fkfGuanglongAccelerationModel$att[8,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[8,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[8,8,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[8,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[z] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.z[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[z] ~ " for data"), ylab = expression(a[z] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.z[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.z[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] + fkfGuanglongAccelerationModel$att[9,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[9,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[9,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.z[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[z] ~ " state"), expression("imu " ~ a[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
