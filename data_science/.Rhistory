GGt = diag(6),
Zt = processAccelerationModel$H,
Tt = array(as.numeric(unlist(lapply(1:aMTMax,acceleration_transition_at_index))), dim=c(9, 9, aMTMax)),
HHt = processAccelerationModel$Q,
yt = matrix(data = c(
imkDf$kinect_hand_right.x[1:aMTMax],
imkDf$kinect_hand_right.y[1:aMTMax],
imkDf$kinect_hand_right.z[1:aMTMax],
imkDf$imu_acceleration.x[1:oMTMax],
imkDf$imu_acceleration.y[1:oMTMax],
imkDf$imu_acceleration.z[1:oMTMax]
), nrow = 6, ncol = aMTMax, byrow = TRUE)
)
plot_limit_offset = 0.5
plot(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[x] ~ " for data"), ylab = expression(p[x] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] + fkfGuanglongAccelerationModel$att[1,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[1,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[1,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[x] ~ " state"), expression("simulated " ~ p[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$rotated_x_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[x] ~ " for data"), ylab = expression(a[x] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$rotated_x_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) - plot_limit_offset,
max(imkDf$rotated_x_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] + fkfGuanglongAccelerationModel$att[3,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[3,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[3,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$rotated_x_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[x] ~ " state"), expression("simulated " ~ a[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[y] ~ " for data"), ylab = expression(p[y] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] + fkfGuanglongAccelerationModel$att[4,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[4,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[4,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$rotated_y_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[y] ~ " for data"), ylab = expression(a[y] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$rotated_y_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) - plot_limit_offset,
max(imkDf$rotated_y_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] + fkfGuanglongAccelerationModel$att[6,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[6,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[6,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$rotated_y_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[y] ~ " state"), expression("imu " ~ a[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[z] ~ " for data"), ylab = expression(p[z] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] + fkfGuanglongAccelerationModel$att[7,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[7,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[7,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$rotated_z_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[z] ~ " for data"), ylab = expression(a[z] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$rotated_z_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) - plot_limit_offset,
max(imkDf$rotated_z_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] + fkfGuanglongAccelerationModel$att[9,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[9,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[9,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$rotated_z_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[z] ~ " state"), expression("imu " ~ a[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_pitch[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[x]), ylab = expression(omega[x] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[5,1:oMTMax], deg2rad(imkDf$imu_pitch[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[5,1:oMTMax], deg2rad(imkDf$imu_pitch[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] + fkfGuanglongOrientationModel$att[5,1:oMTMax], rev(fkfGuanglongOrientationModel$att[5,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[5,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_pitch[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[x] ~ " state"), expression("imu " ~ omega[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_roll[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[y]), ylab = expression(omega[y] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[6,1:oMTMax], deg2rad(imkDf$imu_pitch[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[6,1:oMTMax], deg2rad(imkDf$imu_pitch[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] + fkfGuanglongOrientationModel$att[6,1:oMTMax], rev(fkfGuanglongOrientationModel$att[6,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[6,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_roll[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[y] ~ " state"), expression("imu " ~ omega[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_yaw[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[z]), ylab = expression(omega[z] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[7,1:oMTMax], deg2rad(imkDf$imu_yaw[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[7,1:oMTMax], deg2rad(imkDf$imu_yaw[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] + fkfGuanglongOrientationModel$att[7,1:oMTMax], rev(fkfGuanglongOrientationModel$att[7,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[7,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_yaw[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[z] ~ " state"), expression("imu " ~ omega[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[x] ~ " for data"), ylab = expression(p[x] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] + fkfGuanglongAccelerationModel$att[1,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[1,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[1,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[x] ~ " state"), expression("kinect " ~ p[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$rotated_x_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[x] ~ " for data"), ylab = expression(a[x] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$rotated_x_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) - plot_limit_offset,
max(imkDf$rotated_x_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] + fkfGuanglongAccelerationModel$att[3,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[3,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[3,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$rotated_x_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[x] ~ " state"), expression("imu " ~ a[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[y] ~ " for data"), ylab = expression(p[y] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] + fkfGuanglongAccelerationModel$att[4,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[4,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[4,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$rotated_y_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[y] ~ " for data"), ylab = expression(a[y] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$rotated_y_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) - plot_limit_offset,
max(imkDf$rotated_y_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] + fkfGuanglongAccelerationModel$att[6,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[6,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[6,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$rotated_y_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[y] ~ " state"), expression("imu " ~ a[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[z] ~ " for data"), ylab = expression(p[z] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] + fkfGuanglongAccelerationModel$att[7,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[7,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[7,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$rotated_z_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[z] ~ " for data"), ylab = expression(a[z] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$rotated_z_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) - plot_limit_offset,
max(imkDf$rotated_z_acceleration[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] + fkfGuanglongAccelerationModel$att[9,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[9,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[9,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$rotated_z_acceleration[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[z] ~ " state"), expression("imu " ~ a[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_pitch[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[x]), ylab = expression(omega[x] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[5,1:oMTMax], deg2rad(imkDf$imu_pitch[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[5,1:oMTMax], deg2rad(imkDf$imu_pitch[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] + fkfGuanglongOrientationModel$att[5,1:oMTMax], rev(fkfGuanglongOrientationModel$att[5,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[5,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_pitch[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[x] ~ " state"), expression("imu " ~ omega[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_roll[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[y]), ylab = expression(omega[y] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[6,1:oMTMax], deg2rad(imkDf$imu_pitch[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[6,1:oMTMax], deg2rad(imkDf$imu_pitch[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] + fkfGuanglongOrientationModel$att[6,1:oMTMax], rev(fkfGuanglongOrientationModel$att[6,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[6,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_roll[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[y] ~ " state"), expression("imu " ~ omega[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(deg2rad(imkDf$imu_yaw[1:oMTMax]) ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[z]), ylab = expression(omega[z] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[7,1:oMTMax], deg2rad(imkDf$imu_yaw[1:oMTMax])) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[7,1:oMTMax], deg2rad(imkDf$imu_yaw[1:oMTMax])) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] + fkfGuanglongOrientationModel$att[7,1:oMTMax], rev(fkfGuanglongOrientationModel$att[7,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[7,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(deg2rad(imkDf$imu_yaw[1:oMTMax]) ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[z] ~ " state"), expression("imu " ~ omega[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
# Plot the orientation
plot_limit_offset = 0.5
plot(normalizedOrientationState$w[1:simulatedMax] ~ sim_time, pch  = 20, main = expression(q[w] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(normalizedOrientationState$w[1:simulatedMax]) - plot_limit_offset,
max(normalizedOrientationState$w[1:simulatedMax]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[1,1,1:simulatedMax] + normalizedOrientationState$w[1:simulatedMax], rev(normalizedOrientationState$w[1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[1,1,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(normalizedOrientationState$w[1:simulatedMax] ~ sim_time, col = "blue")
legend("bottomright", legend = c(expression(q[w] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(normalizedOrientationState$x[1:simulatedMax] ~ sim_time, pch  = 20, main = expression(q[x] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(normalizedOrientationState$x[1:simulatedMax]) - plot_limit_offset,
max(normalizedOrientationState$x[1:simulatedMax]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[2,2,1:simulatedMax] + normalizedOrientationState$x[1:simulatedMax], rev(normalizedOrientationState$x[1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[2,2,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(normalizedOrientationState$x[1:simulatedMax] ~ sim_time, col = "blue")
legend("bottomright", legend = c(expression(q[x] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(normalizedOrientationState$y[1:simulatedMax] ~ sim_time, pch  = 20, main = expression(q[y] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(normalizedOrientationState$y[1:simulatedMax]) - plot_limit_offset,
max(normalizedOrientationState$y[1:simulatedMax]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[3,3,1:simulatedMax] + normalizedOrientationState$y[1:simulatedMax], rev(normalizedOrientationState$y[1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[3,3,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(normalizedOrientationState$y[1:simulatedMax] ~ sim_time, col = "blue")
legend("bottomright", legend = c(expression(q[y] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(normalizedOrientationState$z[1:simulatedMax] ~ sim_time, pch  = 20, main = expression(q[z] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(normalizedOrientationState$z[1:simulatedMax]) - plot_limit_offset,
max(normalizedOrientationState$z[1:simulatedMax]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[4,4,1:simulatedMax] + normalizedOrientationState$z[1:simulatedMax], rev(normalizedOrientationState$z[1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[4,4,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(normalizedOrientationState$z[1:simulatedMax] ~ sim_time, col = "blue")
legend("bottomright", legend = c(expression(q[z] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(simulationOrientationMeasurementsAsMatrix[1,] ~ sim_time, pch  = 20, main = expression(omega[x] ~ "in simulation"), ylab = expression(omega[x] ~ "in °/s"), xlab="t in s", type='l', ylim=c(
min(simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[1,]) - plot_limit_offset,
max(simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[1,]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[5,5,1:simulatedMax] + simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax], rev(simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[5,5,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax] ~ sim_time, col = "blue")
lines(simulationOrientationMeasurementsAsMatrix[1,] ~ sim_time)
legend("bottomright", legend = c(expression(omega[x] ~ "state"), expression("simulated " ~ omega[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(simulationOrientationMeasurementsAsMatrix[2,] ~ sim_time, pch  = 20, main = expression(omega[y] ~ "in simulation"), ylab = expression(omega[y] ~ "in °/s"), xlab="t in s", type='l', ylim=c(
min(simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[2,]) - plot_limit_offset,
max(simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[2,]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[6,6,1:simulatedMax] + simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax], rev(simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[6,6,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax] ~ sim_time, col = "blue")
lines(simulationOrientationMeasurementsAsMatrix[2,] ~ sim_time)
legend("bottomright", legend = c(expression(omega[y] ~ "state"), expression("simulated " ~ omega[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(simulationOrientationMeasurementsAsMatrix[3,] ~ sim_time, pch  = 20, main = expression(omega[z] ~ "in simulation"), ylab = expression(omega[z] ~ "in °/s"), xlab="t in s", type='l', ylim=c(
min(simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[3,]) - plot_limit_offset,
max(simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[3,]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[7,7,1:simulatedMax] + simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax], rev(simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[7,7,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax] ~ sim_time, col = "blue")
lines(simulationOrientationMeasurementsAsMatrix[3,] ~ sim_time)
legend("bottomright", legend = c(expression(omega[z] ~ "state"), expression("simulated " ~ omega[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(simulatedfkfGuanglongOrientationModel, type = "resid.qq")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
print(params)
fileConn<-file("idle-simulation-no-noise/params.txt")
writeLines(params, fileConn)
close(fileConn)
params
str(params)
fileConn<-file("idle-simulation-no-noise/params.txt")
writeLines(str(params), fileConn)
toString(params)
type(params)
class(params)
toString(params)
View(params)
library(yaml)
as.yaml(params)
print(params)
fileConn<-file("plots/idle-simulation-no-noise/params.txt")
writeLines(as.yaml(params), fileConn)
close(fileConn)
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
print(params)
fileConn<-file("plots/simulation-rotate-vx-and-accelerate-forward/params.txt")
writeLines(as.yaml(params), fileConn)
close(fileConn)
writeLines(as.yaml(params), fileConn)
print(params)
writeLines(as.yaml(params), fileConn)
print(params)
fileConn<-file("./plots/simulation-rotate-vx-and-accelerate-forward/params.txt")
writeLines(as.yaml(params), fileConn)
close(fileConn)
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
print(params)
dir.create("./plots/simulation-rotate-vx-and-accelerate-forward")
fileConn<-file("./plots/simulation-rotate-vx-and-accelerate-forward/params.txt")
writeLines(as.yaml(params), fileConn)
close(fileConn)
knitr::opts_chunk$set(echo=FALSE)
print(params)
dir.create("./plots/simulation-rotate-vx-and-accelerate-forward")
fileConn<-file("./plots/simulation-rotate-vx-and-accelerate-forward/params.txt")
writeLines(as.yaml(params), fileConn)
close(fileConn)
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
params$output_path
output_path
params$output_path
# Install Libraries, when necessary
#install.packages("RMThreshold")
#install.packages("jsonlite")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("patchwork")
#install.packages("reshape2")
#install.packages("RSpincalc")
#install.packages("LaplacesDemon")
#install.packages('Rcpp')
#install.packages('KFK')
#install.packages("shiny")
# Load Libraries
library(shiny)
library(dplyr)
library(RMThreshold)
library(ggplot2)
library(RSpincalc)
library(reshape2)
library(LaplacesDemon)
library(Rcpp)
library(FKF)
library(yaml)
outputPath = params$output_path
dir.create(outputPath)
fileConn<-file(outputPath)
writeLines(as.yaml(params), fileConn)
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
if(!dir.exists(params$output_path)){
dir.create(params$output_path)
}
fileConn<-file(outputPath + "params.txt")
writeLines(as.yaml(params), fileConn)
if(!dir.exists(params$output_path)){
dir.create(params$output_path)
}
fileConn<-file(outputPath + "params.txt")
params$output_path + "params.txt"
str(params$output_path + "params.txt")
str(str(params$output_path) + "params.txt")
str(params$output_path)
str(params$output_path << "asd")
str(params$output_path + "asd")
concat("qwe","aysd")
append("asd","yxc")
if(!dir.exists(params$output_path)){
dir.create(params$output_path)
}
fileConn<-file(append(params$output_path, "params.txt"))
writeLines(as.yaml(params), fileConn)
if(!dir.exists(params$output_path)){
dir.create(params$output_path)
}
fileConn<-file(append(params$output_path, "params.txt"))
append(params$output_path, "params.txt")
append(params$output_path + "params.txt")
append(params$output_path,"params.txt")
append(params$output_path,'params.txt')
append("asd","yxc")
paste("asd","yxc")
paster("yxc","yxc")
paster("yxc","ycc")
paste("yxc","ycc",sep = "")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
paste(params$output_path,"params.txt",sep = "")
if(!dir.exists(params$output_path)){
dir.create(params$output_path)
}
fileConn<-file(paste(params$output_path,"params.txt", sep = ""))
writeLines(as.yaml(params), fileConn)
close(fileConn)
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
knitr::opts_chunk$set(fig.path = params$output_path)
# Plot the orientation
plot_limit_offset = 0.5
plot(normalizedOrientationState$w[1:simulatedMax] ~ sim_time, pch  = 20, main = expression(q[w] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(normalizedOrientationState$w[1:simulatedMax]) - plot_limit_offset,
max(normalizedOrientationState$w[1:simulatedMax]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[1,1,1:simulatedMax] + normalizedOrientationState$w[1:simulatedMax], rev(normalizedOrientationState$w[1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[1,1,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(normalizedOrientationState$w[1:simulatedMax] ~ sim_time, col = "blue")
legend("bottomright", legend = c(expression(q[w] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(normalizedOrientationState$x[1:simulatedMax] ~ sim_time, pch  = 20, main = expression(q[x] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(normalizedOrientationState$x[1:simulatedMax]) - plot_limit_offset,
max(normalizedOrientationState$x[1:simulatedMax]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[2,2,1:simulatedMax] + normalizedOrientationState$x[1:simulatedMax], rev(normalizedOrientationState$x[1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[2,2,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(normalizedOrientationState$x[1:simulatedMax] ~ sim_time, col = "blue")
legend("bottomright", legend = c(expression(q[x] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(normalizedOrientationState$y[1:simulatedMax] ~ sim_time, pch  = 20, main = expression(q[y] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(normalizedOrientationState$y[1:simulatedMax]) - plot_limit_offset,
max(normalizedOrientationState$y[1:simulatedMax]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[3,3,1:simulatedMax] + normalizedOrientationState$y[1:simulatedMax], rev(normalizedOrientationState$y[1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[3,3,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(normalizedOrientationState$y[1:simulatedMax] ~ sim_time, col = "blue")
legend("bottomright", legend = c(expression(q[y] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(normalizedOrientationState$z[1:simulatedMax] ~ sim_time, pch  = 20, main = expression(q[z] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(normalizedOrientationState$z[1:simulatedMax]) - plot_limit_offset,
max(normalizedOrientationState$z[1:simulatedMax]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[4,4,1:simulatedMax] + normalizedOrientationState$z[1:simulatedMax], rev(normalizedOrientationState$z[1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[4,4,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(normalizedOrientationState$z[1:simulatedMax] ~ sim_time, col = "blue")
legend("bottomright", legend = c(expression(q[z] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(simulationOrientationMeasurementsAsMatrix[1,] ~ sim_time, pch  = 20, main = expression(omega[x] ~ "in simulation"), ylab = expression(omega[x] ~ "in °/s"), xlab="t in s", type='l', ylim=c(
min(simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[1,]) - plot_limit_offset,
max(simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[1,]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[5,5,1:simulatedMax] + simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax], rev(simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[5,5,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongOrientationModel$att[5,1:simulatedMax] ~ sim_time, col = "blue")
lines(simulationOrientationMeasurementsAsMatrix[1,] ~ sim_time)
legend("bottomright", legend = c(expression(omega[x] ~ "state"), expression("simulated " ~ omega[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(simulationOrientationMeasurementsAsMatrix[2,] ~ sim_time, pch  = 20, main = expression(omega[y] ~ "in simulation"), ylab = expression(omega[y] ~ "in °/s"), xlab="t in s", type='l', ylim=c(
min(simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[2,]) - plot_limit_offset,
max(simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[2,]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[6,6,1:simulatedMax] + simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax], rev(simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[6,6,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongOrientationModel$att[6,1:simulatedMax] ~ sim_time, col = "blue")
lines(simulationOrientationMeasurementsAsMatrix[2,] ~ sim_time)
legend("bottomright", legend = c(expression(omega[y] ~ "state"), expression("simulated " ~ omega[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(simulationOrientationMeasurementsAsMatrix[3,] ~ sim_time, pch  = 20, main = expression(omega[z] ~ "in simulation"), ylab = expression(omega[z] ~ "in °/s"), xlab="t in s", type='l', ylim=c(
min(simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[3,]) - plot_limit_offset,
max(simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax], simulationOrientationMeasurementsAsMatrix[3,]) + plot_limit_offset))
polygon(
x = c(sim_time, rev(sim_time)),
y = c(simulatedfkfGuanglongOrientationModel$Ptt[7,7,1:simulatedMax] + simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax], rev(simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax] - simulatedfkfGuanglongOrientationModel$Ptt[7,7,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongOrientationModel$att[7,1:simulatedMax] ~ sim_time, col = "blue")
lines(simulationOrientationMeasurementsAsMatrix[3,] ~ sim_time)
legend("bottomright", legend = c(expression(omega[z] ~ "state"), expression("simulated " ~ omega[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
#plot(simulatedfkfGuanglongOrientationModel, type = "resid.qq")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong_simulation.Rmd", encoding = "UTF-8")
