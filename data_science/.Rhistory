# P -> P: Sensor Belief
processModel = list()
Ts = 0.014
processModel$Ad = matrix(data = c(
1,Ts,matrixHandToLocal$mx_x * Ts**2/2,  0,0,matrixHandToLocal$my_x * Ts**2/2,  0,0,matrixHandToLocal$mz_x * Ts**2/2,
0,1,matrixHandToLocal$mx_x * Ts,        0,0,matrixHandToLocal$my_x * Ts,       0,0,matrixHandToLocal$mz_x * Ts,
0,0,1,                                  0,0,0,                                 0,0,0,
0,0,matrixHandToLocal$mx_y * Ts**2/2,   1,Ts,matrixHandToLocal$my_y * Ts**2/2,  0,0,matrixHandToLocal$mz_y * Ts**2/2,
0,0,matrixHandToLocal$mx_y * Ts,        0,1,matrixHandToLocal$my_y * Ts,       0,0,matrixHandToLocal$mz_y * Ts,
0,0,0,                                  0,0,1,                                 0,0,0,
0,0,matrixHandToLocal$mx_z * Ts**2/2,   0,0,matrixHandToLocal$my_z * Ts**2/2,  1,Ts,matrixHandToLocal$mz_z * Ts**2/2,
0,0,matrixHandToLocal$mx_z * Ts,        0,0,matrixHandToLocal$my_z * Ts,       0,1,matrixHandToLocal$mz_z * Ts,
0,0,0,                                  0,0,0,                                 0,0,1
)
,nrow = 9, ncol = 9, byrow=TRUE)
processModel$x = matrix(data = initialState, nrow = 9, ncol = 1) ## state vector
processModel$B = matrix(data = c(0,0,0,0,0,0, -vectorLength(gravityVector) * Ts**2/2, -vectorLength(gravityVector) * Ts, 0), nrow = 9, ncol = 1)
processModel$H = matrix(data = c(
1,0,0,0,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,1
), nrow = 6, ncol = 9, byrow=TRUE) ## observation/ measurment vector
processModel$Gd = matrix(data = c(
Ts**2/2,0,0,
Ts,     0,0,
1,      0,0,
0,Ts**2/2,0,
0,Ts,     0,
0,1,      0,
0,0,Ts**2/2,
0,0,Ts     ,
0,0,1
), nrow=9, ncol=3, byrow = TRUE)
omega = diag(x=c(
process_noise_acceleration_noise_omega_x,
process_noise_acceleration_noise_omega_y,
process_noise_acceleration_noise_omega_z)
)
processModel$Q = processModel$Gd %*% omega %*% t(processModel$Gd)
processModel$P = initialBelief
processModel$R = matrix(nrow = 6, ncol = 1, data = c(
sensor_noise_kinect_sigma_x,
sensor_noise_kinect_sigma_y,
sensor_noise_kinect_sigma_z,
sensor_noise_imu_sigma_x,
sensor_noise_imu_sigma_y,
sensor_noise_imu_sigma_z
))
processModel$colNames = c("x","v_x","a_x","y","v_y","a_y","z","v_z","a_z")
return(processModel)
}
x_initial_state_q0 = 1.0
x_initial_state_q1 = 0.0
x_initial_state_q2 = 0.0
x_initial_state_q3 = 0.0
x_initial_state_euler_vx = 1.0
x_initial_state_euler_vy = 1.0
x_initial_state_euler_vz = 1.0
initial_belief_00_q0 = 0.5
initial_belief_11_q1 = 0.5
initial_belief_22_q2 = 0.5
initial_belief_33_q3 = 0.5
initial_belief_44_euler_vx = 0.5
initial_belief_55_euler_vy = 0.5
initial_belief_66_euler_vz = 0.5
x_initial_state_px = 0.0
x_initial_state_vx = 1.0
x_initial_state_ax = 1.0
x_initial_state_py = 0.0
x_initial_state_vy = 1.0
x_initial_state_ay = 1.0
x_initial_state_pz = 0.0
x_initial_state_vz = 1.0
x_initial_state_az = 1.0
initial_belief_px_00 = 0.05
initial_belief_vx_11 = 0.5
initial_belief_ax_22 = 0.5
initial_belief_py_33 = 0.05
initial_belief_vy_44 = 0.5
initial_belief_ay_55 = 0.5
initial_belief_pz_66 = 0.05
initial_belief_vz_77 = 0.5
initial_belief_az_88 = 0.5
x_initial_yaw_velocity = 51.2142
x_initial_pitch_velocity = -59.64433
x_initial_roll_velocity = 29.44991
initial_gravity_x = -0.862976
initial_gravity_y = 0.491126
initial_gravity_z = 0.117758
initial_rotation_matrix_11 = 0.6510104
initial_rotation_matrix_12 = 0.6506626
initial_rotation_matrix_13 = 0.6508916
initial_rotation_matrix_21 = 0.650859
initial_rotation_matrix_22 = 0.6506928
initial_rotation_matrix_23 = 0.6510568
initial_rotation_matrix_31 = 0.6507239
initial_rotation_matrix_32 = 0.6507714
initial_rotation_matrix_33 = 0.6511943
initial_orientation_state = c(
x_initial_state_q0,
x_initial_state_q1,
x_initial_state_q2,
x_initial_state_q3,
x_initial_yaw_velocity,
x_initial_pitch_velocity,
x_initial_roll_velocity
)
initial_orientation_belief = diag(
c(
initial_belief_00_q0,
initial_belief_11_q1,
initial_belief_22_q2,
initial_belief_33_q3,
initial_belief_44_euler_vx,
initial_belief_55_euler_vy,
initial_belief_66_euler_vz
)
)
initial_matrixHandToLocal = data.frame(
mx_x = initial_rotation_matrix_11, my_x = initial_rotation_matrix_12, mz_x = initial_rotation_matrix_13,
mx_y = initial_rotation_matrix_21, my_y = initial_rotation_matrix_22, mz_y = initial_rotation_matrix_23,
mx_z = initial_rotation_matrix_31, my_z = initial_rotation_matrix_32, mz_z = initial_rotation_matrix_33
)
initial_gravity = data.frame(
x = initial_gravity_x,
y = initial_gravity_y,
z = initial_gravity_z
)
initial_acceleration_state = c(
x_initial_state_px,
x_initial_state_vx,
x_initial_state_ax,
x_initial_state_py,
x_initial_state_vy,
x_initial_state_ay,
x_initial_state_pz,
x_initial_state_vz,
x_initial_state_az
)
initial_acceleration_belief = diag(c(
initial_belief_px_00,
initial_belief_vx_11,
initial_belief_ax_22,
initial_belief_py_33,
initial_belief_vy_44,
initial_belief_ay_55,
initial_belief_pz_66,
initial_belief_vz_77,
initial_belief_az_88
))
processAccelerationModel = getGuanglongAccelerationModel(initial_acceleration_state, initial_acceleration_belief, initial_matrixHandToLocal, initial_gravity)
processOrientationModel = getGuanglongOrientationModel(initial_orientation_state, initial_orientation_belief)
debugSource('~/Workspace/Digital-Identity/data_science/scripts/models.R')
initialState
x_initial_state_q0 = 1.0
x_initial_state_q1 = 0.0
x_initial_state_q2 = 0.0
x_initial_state_q3 = 0.0
x_initial_state_euler_vx = 1.0
x_initial_state_euler_vy = 1.0
x_initial_state_euler_vz = 1.0
initial_belief_00_q0 = 0.5
initial_belief_11_q1 = 0.5
initial_belief_22_q2 = 0.5
initial_belief_33_q3 = 0.5
initial_belief_44_euler_vx = 0.5
initial_belief_55_euler_vy = 0.5
initial_belief_66_euler_vz = 0.5
x_initial_state_px = 0.0
x_initial_state_vx = 1.0
x_initial_state_ax = 1.0
x_initial_state_py = 0.0
x_initial_state_vy = 1.0
x_initial_state_ay = 1.0
x_initial_state_pz = 0.0
x_initial_state_vz = 1.0
x_initial_state_az = 1.0
initial_belief_px_00 = 0.05
initial_belief_vx_11 = 0.5
initial_belief_ax_22 = 0.5
initial_belief_py_33 = 0.05
initial_belief_vy_44 = 0.5
initial_belief_ay_55 = 0.5
initial_belief_pz_66 = 0.05
initial_belief_vz_77 = 0.5
initial_belief_az_88 = 0.5
x_initial_yaw_velocity = 51.2142
x_initial_pitch_velocity = -59.64433
x_initial_roll_velocity = 29.44991
initial_gravity_x = -0.862976
initial_gravity_y = 0.491126
initial_gravity_z = 0.117758
initial_rotation_matrix_11 = 0.6510104
initial_rotation_matrix_12 = 0.6506626
initial_rotation_matrix_13 = 0.6508916
initial_rotation_matrix_21 = 0.650859
initial_rotation_matrix_22 = 0.6506928
initial_rotation_matrix_23 = 0.6510568
initial_rotation_matrix_31 = 0.6507239
initial_rotation_matrix_32 = 0.6507714
initial_rotation_matrix_33 = 0.6511943
initial_orientation_state = c(
x_initial_state_q0,
x_initial_state_q1,
x_initial_state_q2,
x_initial_state_q3,
x_initial_yaw_velocity,
x_initial_pitch_velocity,
x_initial_roll_velocity
)
initial_orientation_belief = diag(
c(
initial_belief_00_q0,
initial_belief_11_q1,
initial_belief_22_q2,
initial_belief_33_q3,
initial_belief_44_euler_vx,
initial_belief_55_euler_vy,
initial_belief_66_euler_vz
)
)
initial_matrixHandToLocal = data.frame(
mx_x = initial_rotation_matrix_11, my_x = initial_rotation_matrix_12, mz_x = initial_rotation_matrix_13,
mx_y = initial_rotation_matrix_21, my_y = initial_rotation_matrix_22, mz_y = initial_rotation_matrix_23,
mx_z = initial_rotation_matrix_31, my_z = initial_rotation_matrix_32, mz_z = initial_rotation_matrix_33
)
initial_gravity = data.frame(
x = initial_gravity_x,
y = initial_gravity_y,
z = initial_gravity_z
)
initial_acceleration_state = c(
x_initial_state_px,
x_initial_state_vx,
x_initial_state_ax,
x_initial_state_py,
x_initial_state_vy,
x_initial_state_ay,
x_initial_state_pz,
x_initial_state_vz,
x_initial_state_az
)
initial_acceleration_belief = diag(c(
initial_belief_px_00,
initial_belief_vx_11,
initial_belief_ax_22,
initial_belief_py_33,
initial_belief_vy_44,
initial_belief_ay_55,
initial_belief_pz_66,
initial_belief_vz_77,
initial_belief_az_88
))
processAccelerationModel = getGuanglongAccelerationModel(initial_acceleration_state, initial_acceleration_belief, initial_matrixHandToLocal, initial_gravity)
processOrientationModel = getGuanglongOrientationModel(initial_orientation_state, initial_orientation_belief)
initialState
Ts = 0.014
process_noise_orientation_angular_velocity_sigma_x = 0.05
process_noise_orientation_angular_velocity_sigma_y = 0.05
process_noise_orientation_angular_velocity_sigma_z = 0.05
process_noise_acceleration_noise_omega_x = 0.05
process_noise_acceleration_noise_omega_y = 0.05
process_noise_acceleration_noise_omega_z = 0.05
sensor_noise_imu_euler_velocity_x =  0.5
sensor_noise_imu_euler_velocity_y =  0.5
sensor_noise_imu_euler_velocity_z =  0.5
sensor_noise_imu_sigma_x = 0.009810001
sensor_noise_imu_sigma_y = 0.009810001
sensor_noise_imu_sigma_z = 0.009810001
sensor_noise_kinect_sigma_x = 0.05
sensor_noise_kinect_sigma_y = 0.05
sensor_noise_kinect_sigma_z = 0.05
getGuanglongOrientationModel <- function(initialState, initialBelief) {
#Currently used variable names -> variable names from Slides
# F -> A: State Transition Matrix
# a -> x: State Vector
# H -> C: Observation Matrix
# Q -> Q: Process Noise Matrix
# R -> R: Sensor Noise Matrix
# P -> P: Sensor Belief
processModel = list()
# Vielleicht sind die Quaternion states hier dynamisch zu sehen
processModel$Ad = matrix(data = c(
1,0,0,0,        -initialState[2] * Ts/2  ,-initialState[3]     ,-initialState[4] * Ts/2,
0,1,0,0,        initialState[1] * Ts/2   ,initialState[4]      ,initialState[3] * Ts/2,
0,0,1,0,        initialState[4] * Ts/2   ,initialState[1]*Ts/2 ,-initialState[2] * Ts/2,
0,0,0,1,        -initialState[3] * Ts/2  ,initialState[2]*Ts/2 ,initialState[1] * Ts/2,
0,0,0,0,        1,0,0,
0,0,0,0,        0,1,0,
0,0,0,0,        0,0,1
)
,nrow = 7, ncol = 7, byrow=TRUE)
processModel$x = matrix(data = initialState, nrow = 7, ncol = 1) ## state vector
processModel$H = matrix(data = c(
0,0,0,0,1,0,0,
0,0,0,0,0,1,0,
0,0,0,0,0,0,1
), nrow = 3, ncol = 7, byrow=TRUE) ## observation/ measurment vector
omega = c(
1,
1,
1,
1,
process_noise_orientation_angular_velocity_sigma_x,
process_noise_orientation_angular_velocity_sigma_y,
process_noise_orientation_angular_velocity_sigma_z
)
processModel$Q = diag(omega)
processModel$R = matrix(data = c(
sensor_noise_imu_euler_velocity_x,
sensor_noise_imu_euler_velocity_y,
sensor_noise_imu_euler_velocity_z
),ncol= 1, nrow = 3)
processModel$P = initialBelief
processModel$colNames = c("q_0","q_1","q_2","q_3","v_x","v_y","v_z")
return(processModel)
}
# TODO: Transformationsmatrix berechnen
getGuanglongAccelerationModel <- function(initialState, initialBelief, matrixHandToLocal, gravityVector) {
#Currently used variable names -> variable names from Slides
# F -> A: State Transition Matrix
# a -> x: State Vector
# H -> C: Observation Matrix
# Q -> Q: Process Noise Matrix
# R -> R: Sensor Noise Matrix
# P -> P: Sensor Belief
processModel = list()
Ts = 0.014
processModel$Ad = matrix(data = c(
1,Ts,matrixHandToLocal$mx_x * Ts**2/2,  0,0,matrixHandToLocal$my_x * Ts**2/2,  0,0,matrixHandToLocal$mz_x * Ts**2/2,
0,1,matrixHandToLocal$mx_x * Ts,        0,0,matrixHandToLocal$my_x * Ts,       0,0,matrixHandToLocal$mz_x * Ts,
0,0,1,                                  0,0,0,                                 0,0,0,
0,0,matrixHandToLocal$mx_y * Ts**2/2,   1,Ts,matrixHandToLocal$my_y * Ts**2/2,  0,0,matrixHandToLocal$mz_y * Ts**2/2,
0,0,matrixHandToLocal$mx_y * Ts,        0,1,matrixHandToLocal$my_y * Ts,       0,0,matrixHandToLocal$mz_y * Ts,
0,0,0,                                  0,0,1,                                 0,0,0,
0,0,matrixHandToLocal$mx_z * Ts**2/2,   0,0,matrixHandToLocal$my_z * Ts**2/2,  1,Ts,matrixHandToLocal$mz_z * Ts**2/2,
0,0,matrixHandToLocal$mx_z * Ts,        0,0,matrixHandToLocal$my_z * Ts,       0,1,matrixHandToLocal$mz_z * Ts,
0,0,0,                                  0,0,0,                                 0,0,1
)
,nrow = 9, ncol = 9, byrow=TRUE)
processModel$x = matrix(data = initialState, nrow = 9, ncol = 1) ## state vector
processModel$B = matrix(data = c(0,0,0,0,0,0, -vectorLength(gravityVector) * Ts**2/2, -vectorLength(gravityVector) * Ts, 0), nrow = 9, ncol = 1)
processModel$H = matrix(data = c(
1,0,0,0,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,1
), nrow = 6, ncol = 9, byrow=TRUE) ## observation/ measurment vector
processModel$Gd = matrix(data = c(
Ts**2/2,0,0,
Ts,     0,0,
1,      0,0,
0,Ts**2/2,0,
0,Ts,     0,
0,1,      0,
0,0,Ts**2/2,
0,0,Ts     ,
0,0,1
), nrow=9, ncol=3, byrow = TRUE)
omega = diag(x=c(
process_noise_acceleration_noise_omega_x,
process_noise_acceleration_noise_omega_y,
process_noise_acceleration_noise_omega_z)
)
processModel$Q = processModel$Gd %*% omega %*% t(processModel$Gd)
processModel$P = initialBelief
processModel$R = matrix(nrow = 6, ncol = 1, data = c(
sensor_noise_kinect_sigma_x,
sensor_noise_kinect_sigma_y,
sensor_noise_kinect_sigma_z,
sensor_noise_imu_sigma_x,
sensor_noise_imu_sigma_y,
sensor_noise_imu_sigma_z
))
processModel$colNames = c("x","v_x","a_x","y","v_y","a_y","z","v_z","a_z")
return(processModel)
}
x_initial_state_q0 = 1.0
x_initial_state_q1 = 0.0
x_initial_state_q2 = 0.0
x_initial_state_q3 = 0.0
x_initial_state_euler_vx = 1.0
x_initial_state_euler_vy = 1.0
x_initial_state_euler_vz = 1.0
initial_belief_00_q0 = 0.5
initial_belief_11_q1 = 0.5
initial_belief_22_q2 = 0.5
initial_belief_33_q3 = 0.5
initial_belief_44_euler_vx = 0.5
initial_belief_55_euler_vy = 0.5
initial_belief_66_euler_vz = 0.5
x_initial_state_px = 0.0
x_initial_state_vx = 1.0
x_initial_state_ax = 1.0
x_initial_state_py = 0.0
x_initial_state_vy = 1.0
x_initial_state_ay = 1.0
x_initial_state_pz = 0.0
x_initial_state_vz = 1.0
x_initial_state_az = 1.0
initial_belief_px_00 = 0.05
initial_belief_vx_11 = 0.5
initial_belief_ax_22 = 0.5
initial_belief_py_33 = 0.05
initial_belief_vy_44 = 0.5
initial_belief_ay_55 = 0.5
initial_belief_pz_66 = 0.05
initial_belief_vz_77 = 0.5
initial_belief_az_88 = 0.5
x_initial_yaw_velocity = 51.2142
x_initial_pitch_velocity = -59.64433
x_initial_roll_velocity = 29.44991
initial_gravity_x = -0.862976
initial_gravity_y = 0.491126
initial_gravity_z = 0.117758
initial_rotation_matrix_11 = 0.6510104
initial_rotation_matrix_12 = 0.6506626
initial_rotation_matrix_13 = 0.6508916
initial_rotation_matrix_21 = 0.650859
initial_rotation_matrix_22 = 0.6506928
initial_rotation_matrix_23 = 0.6510568
initial_rotation_matrix_31 = 0.6507239
initial_rotation_matrix_32 = 0.6507714
initial_rotation_matrix_33 = 0.6511943
initial_orientation_state = c(
x_initial_state_q0,
x_initial_state_q1,
x_initial_state_q2,
x_initial_state_q3,
x_initial_yaw_velocity,
x_initial_pitch_velocity,
x_initial_roll_velocity
)
initial_orientation_belief = diag(
c(
initial_belief_00_q0,
initial_belief_11_q1,
initial_belief_22_q2,
initial_belief_33_q3,
initial_belief_44_euler_vx,
initial_belief_55_euler_vy,
initial_belief_66_euler_vz
)
)
initial_matrixHandToLocal = data.frame(
mx_x = initial_rotation_matrix_11, my_x = initial_rotation_matrix_12, mz_x = initial_rotation_matrix_13,
mx_y = initial_rotation_matrix_21, my_y = initial_rotation_matrix_22, mz_y = initial_rotation_matrix_23,
mx_z = initial_rotation_matrix_31, my_z = initial_rotation_matrix_32, mz_z = initial_rotation_matrix_33
)
initial_gravity = data.frame(
x = initial_gravity_x,
y = initial_gravity_y,
z = initial_gravity_z
)
initial_acceleration_state = c(
x_initial_state_px,
x_initial_state_vx,
x_initial_state_ax,
x_initial_state_py,
x_initial_state_vy,
x_initial_state_ay,
x_initial_state_pz,
x_initial_state_vz,
x_initial_state_az
)
initial_acceleration_belief = diag(c(
initial_belief_px_00,
initial_belief_vx_11,
initial_belief_ax_22,
initial_belief_py_33,
initial_belief_vy_44,
initial_belief_ay_55,
initial_belief_pz_66,
initial_belief_vz_77,
initial_belief_az_88
))
processAccelerationModel = getGuanglongAccelerationModel(initial_acceleration_state, initial_acceleration_belief, initial_matrixHandToLocal, initial_gravity)
processOrientationModel = getGuanglongOrientationModel(initial_orientation_state, initial_orientation_belief)
# Uncomment to install packages
# install.packages("testthat")
# install.packages("usethis")
library(testthat)
library(usethis)
test_that("guanglong acceleration model remains idle when 0 is entered", {
initialIdleState = c(0,0,1,0,0,0,0,0,0)
initialIdleBelief = diag(9)
initial_gravity = data.frame(
x = 0,
y = 0,
z = 9.81
)
nx = 0
ny = 1
nz = 0
#idleRotationMatrix = quaternion_rotation_matrix(1,0,0,0)
phi = pi/2
rotationMatrixByY = quaternion_rotation_matrix(cos(phi/2),nx * sin(phi/2), ny * sin(phi/2), nz * sin(phi/2))
initial_matrixHandToLocal = data.frame(
mx_x = rotationMatrixByY[1,1], my_x = rotationMatrixByY[1,2], mz_x = rotationMatrixByY[1,3],
mx_y = rotationMatrixByY[2,1], my_y = rotationMatrixByY[2,2], mz_y = rotationMatrixByY[2,3],
mx_z = rotationMatrixByY[3,1], my_z = rotationMatrixByY[3,2], mz_z = rotationMatrixByY[3,3]
)
idleAccModel = getGuanglongAccelerationModel(initialIdleState, initialIdleBelief,initial_matrixHandToLocal , initial_gravity)
print(idleAccModel$Ad)
x_1 = idleAccModel$Ad %*% initialIdleState
print(x_1)
})
