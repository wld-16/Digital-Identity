params$initial_belief_ay_55,
params$initial_belief_pz_66,
params$initial_belief_vz_77,
params$initial_belief_az_88
))
acceleration_process_noise = data.frame(
x = params$process_noise_acceleration_noise_omega_x,
y = params$process_noise_acceleration_noise_omega_y,
z = params$process_noise_acceleration_noise_omega_z
)
acceleration_sensor_noise = data.frame(
x = params$sensor_noise_kinect_sigma_x,
y = params$sensor_noise_kinect_sigma_y,
z = params$sensor_noise_kinect_sigma_z,
ax = params$sensor_noise_imu_sigma_x,
ay = params$sensor_noise_imu_sigma_y,
az = params$sensor_noise_imu_sigma_z
)
processAccelerationModel = getGuanglongAccelerationModel(Ts, initial_acceleration_state, initial_acceleration_belief, initial_matrixHandToLocal, gravity[1,], acceleration_process_noise, acceleration_sensor_noise)
oMTMax = 300 # orientationModelTimeMaximum
#temp = deg2rad(imkDf$imu_yaw_velocity)
imkDf$imu_pitch_velocity = imkDf$imu_pitch
imkDf$imu_roll_velocity = imkDf$imu_roll
imkDf$imu_yaw_velocity = imkDf$imu_yaw
# Only works for specific cases
#imkDf$imu_yaw_velocity[imkDf$imu_yaw_velocity > 90] = imkDf$imu_yaw_velocity[imkDf$imu_yaw_velocity > 90] - 360
imkDf$imu_pitch_velocity = deg2rad(imkDf$imu_pitch_velocity)
imkDf$imu_roll_velocity = deg2rad(imkDf$imu_roll_velocity)
imkDf$imu_yaw_velocity = deg2rad(imkDf$imu_yaw_velocity)
kinect_head_to_wrist_quat = quaternion_head_to_right_hand_chain(imkDf)
fkfGuanglongOrientationModel = fkf(
a0 = processOrientationModel$x[,1],
P0 = processOrientationModel$P,
dt = matrix(data = 0, nrow = 7, ncol = 1),
ct = matrix(data = 0, nrow = 3, ncol = 1),
GGt = diag(nrow = 3, ncol = 3),
Zt = processOrientationModel$H,
Tt = array(as.numeric(unlist(lapply(1:oMTMax,orientation_transition_at_index))), dim=c(7, 7, oMTMax)),
HHt = processOrientationModel$Q,
yt = matrix(data = c(
imkDf$imu_pitch_velocity[1:oMTMax],
imkDf$imu_roll_velocity[1:oMTMax],
imkDf$imu_yaw_velocity[1:oMTMax]
), nrow = 3, ncol = oMTMax, byrow = TRUE)
)
normalized_kalman_imu_Quat = normalizeQuaternion(
fkfGuanglongOrientationModel$att[1,],
fkfGuanglongOrientationModel$att[2,],
fkfGuanglongOrientationModel$att[3,],
fkfGuanglongOrientationModel$att[4,]
)
aMTMax = oMTMax # accelerationModelTimeMaximum
gravity = gravity * 9.81
# Von Imu zu Kinect Punktspiegelung an z,y ebenen
temporary_var = imkDf$imu_acceleration.y
imkDf$imu_acceleration.y[1:oMTMax] = imkDf$imu_acceleration.z[1:oMTMax]
imkDf$imu_acceleration.z[1:oMTMax] = temporary_var[1:oMTMax]
quat = normalized_kalman_imu_Quat
fkfGuanglongAccelerationModel = fkf(
a0 = processAccelerationModel$x[,1],
P0 = processAccelerationModel$P,
dt = matrix(data = c(
#-gravity$x[1:aMTMax] * Ts**2/2,
rep(0,times=aMTMax),
#-gravity$x[1:aMTMax] * Ts,
rep(0,times=aMTMax),
rep(0,times=aMTMax),
#-gravity$y[1:aMTMax] * Ts**2/2,
rep(0,times=aMTMax),
#-gravity$y[1:aMTMax] * Ts,
rep(0,times=aMTMax),
rep(0,times=aMTMax),
#-gravity$z[1:aMTMax] * Ts**2/2,
rep(0,times=aMTMax),
#-gravity$z[1:aMTMax] * Ts,
rep(0,times=aMTMax),
rep(0,times=aMTMax)
), nrow = 9, ncol = aMTMax, byrow = TRUE),
ct = matrix(data = c(0,0,0,0,0,0), nrow = 6, ncol = 1),
GGt = diag(6),
Zt = processAccelerationModel$H,
Tt = array(as.numeric(unlist(lapply(1:aMTMax,acceleration_transition_at_index))), dim=c(9, 9, aMTMax)),
HHt = processAccelerationModel$Q,
yt = matrix(data = c(
imkDf$kinect_hand_right.x[1:aMTMax],
imkDf$kinect_hand_right.y[1:aMTMax],
imkDf$kinect_hand_right.z[1:aMTMax],
imkDf$imu_acceleration.x[1:oMTMax],
imkDf$imu_acceleration.y[1:oMTMax],
imkDf$imu_acceleration.z[1:oMTMax]
), nrow = 6, ncol = aMTMax, byrow = TRUE)
)
knitr::opts_chunk$set(fig.path = params$output_path)
plot_limit_offset = 0.05
plot(quat$w[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[w] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$w[1:oMTMax]) - plot_limit_offset,
max(quat$w[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[1,1,1:oMTMax] + quat$w[1:oMTMax], rev(quat$w[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[1,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$w[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[w] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$x[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[x] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$x[1:oMTMax]) - plot_limit_offset,
max(quat$x[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[2,1,1:oMTMax] + quat$x[1:oMTMax], rev(quat$x[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[2,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$x[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[x] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$y[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[y] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$y[1:oMTMax]) - plot_limit_offset,
max(quat$y[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[3,1,1:oMTMax] + quat$y[1:oMTMax], rev(quat$y[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[3,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$y[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[y] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(quat$z[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 20, main = expression(q[z] ~ "state"), ylab = "value normalized", xlab="t in s", type='l', ylim=c(
min(quat$z[1:oMTMax]) - plot_limit_offset,
max(quat$z[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[4,1,1:oMTMax] + quat$z[1:oMTMax], rev(quat$z[1:oMTMax] - fkfGuanglongOrientationModel$Ptt[4,1,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(quat$z[1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
legend("bottomright", legend = c(expression(q[z] ~ "state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_pitch_velocity[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[x]), ylab = expression(omega[x] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[5,1:oMTMax], imkDf$imu_pitch_velocity[1:oMTMax]) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[5,1:oMTMax], imkDf$imu_pitch_velocity[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] + fkfGuanglongOrientationModel$att[5,1:oMTMax], rev(fkfGuanglongOrientationModel$att[5,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[5,5,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[5,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(imkDf$imu_pitch_velocity[1:oMTMax] ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[x] ~ " state"), expression("imu " ~ omega[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$imu_roll_velocity[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[y]), ylab = expression(omega[y] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[6,1:oMTMax], imkDf$imu_roll_velocity[1:oMTMax]) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[6,1:oMTMax], imkDf$imu_roll_velocity[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] + fkfGuanglongOrientationModel$att[6,1:oMTMax], rev(fkfGuanglongOrientationModel$att[6,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[6,6,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[6,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(imkDf$imu_roll_velocity[1:oMTMax] ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[y] ~ " state"), expression("imu " ~ omega[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$imu_yaw_velocity[1:oMTMax] ~ imkDf$t[1:oMTMax], pch  = 4, main = expression("Orientation Kalman for" ~ omega[z]), ylab = expression(omega[z] ~ " in °/s"), xlab="t in s", type='l', ylim=c(
min(fkfGuanglongOrientationModel$att[7,1:oMTMax], imkDf$imu_yaw_velocity[1:oMTMax]) - plot_limit_offset,
max(fkfGuanglongOrientationModel$att[7,1:oMTMax], imkDf$imu_yaw_velocity[1:oMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:oMTMax], rev(imkDf$t[1:oMTMax])),
y = c(fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] + fkfGuanglongOrientationModel$att[7,1:oMTMax], rev(fkfGuanglongOrientationModel$att[7,1:oMTMax] - fkfGuanglongOrientationModel$Ptt[7,7,1:oMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongOrientationModel$att[7,1:oMTMax] ~ imkDf$t[1:oMTMax], col = "blue")
lines(imkDf$imu_yaw_velocity[1:oMTMax] ~ imkDf$t[1:oMTMax])
legend("bottomright", legend = c(expression(omega[z] ~ " state"), expression("imu " ~ omega[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongOrientationModel, type = "resid.qq")
orientation_kalman_statistics = data.frame(
max_q_w = max(quat$w[1:oMTMax]),
min_q_w = min(quat$w[1:oMTMax]),
var_q_w = var(quat$w[1:oMTMax]),
mean_q_w = mean(quat$w[1:oMTMax]),
first_q_w = quat$w[1],
last_q_w = quat$w[oMTMax],
max_q_x = max(quat$x[1:oMTMax]),
min_q_x = min(quat$x[1:oMTMax]),
var_q_x = var(quat$x[1:oMTMax]),
mean_q_x = mean(quat$x[1:oMTMax]),
first_q_x = quat$x[1],
last_q_x = quat$x[oMTMax],
max_q_y = max(quat$y[1:oMTMax]),
min_q_y = min(quat$y[1:oMTMax]),
var_q_y = var(quat$y[1:oMTMax]),
mean_q_y = mean(quat$y[1:oMTMax]),
first_q_y = quat$y[1],
last_q_y = quat$y[oMTMax],
max_q_z = max(quat$z[1:oMTMax]),
min_q_z = min(quat$z[1:oMTMax]),
var_q_z = var(quat$z[1:oMTMax]),
mean_q_z = mean(quat$z[1:oMTMax]),
first_q_z = quat$z[1],
last_q_z = quat$z[oMTMax],
max_v_x = max(fkfGuanglongOrientationModel$att[5,1:oMTMax]),
min_v_x = min(fkfGuanglongOrientationModel$att[5,1:oMTMax]),
var_v_x = var(fkfGuanglongOrientationModel$att[5,1:oMTMax]),
mean_v_x = mean(fkfGuanglongOrientationModel$att[5,1:oMTMax]),
first_v_x = fkfGuanglongOrientationModel$att[5,1],
last_v_x = fkfGuanglongOrientationModel$att[5,oMTMax],
max_v_y = max(fkfGuanglongOrientationModel$att[6,1:oMTMax]),
min_v_y = min(fkfGuanglongOrientationModel$att[6,1:oMTMax]),
var_v_y = var(fkfGuanglongOrientationModel$att[6,1:oMTMax]),
mean_v_y = mean(fkfGuanglongOrientationModel$att[6,1:oMTMax]),
first_v_y = fkfGuanglongOrientationModel$att[6,1],
last_v_y = fkfGuanglongOrientationModel$att[6,oMTMax],
max_v_z = max(fkfGuanglongOrientationModel$att[7,1:oMTMax]),
min_v_z = min(fkfGuanglongOrientationModel$att[7,1:oMTMax]),
var_v_z = var(fkfGuanglongOrientationModel$att[7,1:oMTMax]),
mean_v_z = mean(fkfGuanglongOrientationModel$att[7,1:oMTMax]),
first_v_z = fkfGuanglongOrientationModel$att[7,1],
last_v_z = fkfGuanglongOrientationModel$att[7,oMTMax]
)
orientation_measurement_statistics = data.frame(
max_v_x = max(imkDf$imu_pitch_velocity),
min_v_x = min(imkDf$imu_pitch_velocity),
var_v_x = var(imkDf$imu_pitch_velocity),
mean_v_x = mean(imkDf$imu_pitch_velocity),
first_v_x = imkDf$imu_pitch_velocity[1],
last_v_x = imkDf$imu_pitch_velocity[oMTMax],
mean_res_v_x = mean(abs(imkDf$imu_pitch_velocity[1:oMTMax] - fkfGuanglongOrientationModel$att[5,1:oMTMax])),
max_v_y = max(imkDf$imu_yaw_velocity[1:oMTMax]),
min_v_y = min(imkDf$imu_yaw_velocity[1:oMTMax]),
var_v_y = var(imkDf$imu_yaw_velocity[1:oMTMax]),
mean_v_y = mean(imkDf$imu_yaw_velocity[1:oMTMax]),
first_v_y = imkDf$imu_yaw_velocity[1:oMTMax][1],
last_v_y = imkDf$imu_yaw_velocity[1:oMTMax][oMTMax],
mean_res_v_y = mean(abs(imkDf$imu_yaw_velocity[1:oMTMax] - fkfGuanglongOrientationModel$att[6,1:oMTMax])),
max_v_z = max(imkDf$imu_roll_velocity[1:oMTMax]),
min_v_z = min(imkDf$imu_roll_velocity[1:oMTMax]),
var_v_z = var(imkDf$imu_roll_velocity[1:oMTMax]),
mean_v_z = mean(imkDf$imu_roll_velocity[1:oMTMax]),
first_v_z = imkDf$imu_roll_velocity[oMTMax][1],
last_v_z = imkDf$imu_roll_velocity[oMTMax],
mean_res_v_z = mean(abs(imkDf$imu_roll_velocity[1:oMTMax] - fkfGuanglongOrientationModel$att[7,1:oMTMax]))
)
fileConn<-file(paste(params$output_path,"orientation_measurement_stats.txt", sep = ""))
writeLines(as.yaml(orientation_measurement_statistics), fileConn)
close(fileConn)
fileConn<-file(paste(params$output_path,"orientation_kalman_stats.txt", sep = ""))
writeLines(as.yaml(orientation_kalman_statistics), fileConn)
close(fileConn)
plot_limit_offset = 0.5
plot(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[x] ~ " for data"), ylab = expression(p[x] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.x[1:aMTMax], fkfGuanglongAccelerationModel$att[1,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] + fkfGuanglongAccelerationModel$att[1,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[1,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[1,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.x[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[x] ~ " state"), expression("kinect " ~ p[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[2,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[x]), ylab = expression(v[x] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[2,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[2,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[2,2,1:aMTMax] + fkfGuanglongAccelerationModel$att[2,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[2,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[2,2,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[2,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[x] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.x[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[x] ~ " for data"), ylab = expression(a[x] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.x[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.x[1:aMTMax], fkfGuanglongAccelerationModel$att[3,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] + fkfGuanglongAccelerationModel$att[3,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[3,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[3,3,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[3,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.x[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[x] ~ " state"), expression("imu " ~ a[x]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[y] ~ " for data"), ylab = expression(p[y] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.y[1:aMTMax], fkfGuanglongAccelerationModel$att[4,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] + fkfGuanglongAccelerationModel$att[4,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[4,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[4,4,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[4,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.y[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[y] ~ " state"), expression("kinect " ~ p[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[5,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[y]), ylab = expression(v[y] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[5,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[5,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[5,5,1:aMTMax] + fkfGuanglongAccelerationModel$att[5,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[5,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[5,5,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[5,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[y] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.y[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[y] ~ " for data"), ylab = expression(a[y] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.y[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.y[1:aMTMax], fkfGuanglongAccelerationModel$att[6,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] + fkfGuanglongAccelerationModel$att[6,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[6,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[6,6,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[6,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.y[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[y] ~ " state"), expression("imu " ~ a[y]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(p[z] ~ " for data"), ylab = expression(p[z] ~" in m"), xlab="t in s", type='l', ylim=c(
min(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) - plot_limit_offset,
max(imkDf$kinect_hand_right.z[1:aMTMax], fkfGuanglongAccelerationModel$att[7,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] + fkfGuanglongAccelerationModel$att[7,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[7,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[7,7,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[7,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$kinect_hand_right.z[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(p[z] ~ " state"), expression("kinect " ~ p[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel$att[8,1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression("state " ~ v[z]), ylab = expression(v[z] ~" in m/s"),xlab="t in s", type='l', ylim=c(
min(fkfGuanglongAccelerationModel$att[8,1:aMTMax]) - plot_limit_offset,
max(fkfGuanglongAccelerationModel$att[8,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[8,8,1:aMTMax] + fkfGuanglongAccelerationModel$att[8,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[8,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[8,8,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[8,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
legend("bottomright", legend = c(expression(v[z] ~ " state"), "process uncertainty"), lwd = 3, col = c("blue", "lightsteelblue"))
plot(imkDf$imu_acceleration.z[1:aMTMax] ~ imkDf$t[1:aMTMax], pch  = 20, main = expression(a[z] ~ " for data"), ylab = expression(a[z] ~" in m/" ~ s^2), xlab="t in s", type='l', ylim=c(
min(imkDf$imu_acceleration.z[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) - plot_limit_offset,
max(imkDf$imu_acceleration.z[1:aMTMax], fkfGuanglongAccelerationModel$att[9,1:aMTMax]) + plot_limit_offset))
polygon(
x = c(imkDf$t[1:aMTMax], rev(imkDf$t[1:aMTMax])),
y = c(fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] + fkfGuanglongAccelerationModel$att[9,1:aMTMax], rev(fkfGuanglongAccelerationModel$att[9,1:aMTMax] - fkfGuanglongAccelerationModel$Ptt[9,9,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
lines(fkfGuanglongAccelerationModel$att[9,1:aMTMax] ~ imkDf$t[1:aMTMax], col = "blue")
lines(imkDf$imu_acceleration.z[1:aMTMax] ~ imkDf$t[1:aMTMax])
legend("bottomright", legend = c(expression(a[z] ~ " state"), expression("imu " ~ a[z]), "process uncertainty"), lwd = 3, col = c("blue", "black", "lightsteelblue"))
plot(fkfGuanglongAccelerationModel, type = "resid.qq")
acceleration_measurement_statistics = data.frame(
max_p_x = max(imkDf$kinect_hand_right.x[1:aMTMax]),
min_p_x = min(imkDf$kinect_hand_right.x[1:aMTMax]),
var_p_x = var(imkDf$kinect_hand_right.x[1:aMTMax]),
mean_p_x = mean(imkDf$kinect_hand_right.x[1:aMTMax]),
first_p_X = imkDf$kinect_hand_right.x[1:aMTMax][1],
last_p_X = imkDf$kinect_hand_right.x[1:aMTMax][aMTMax],
mean_res_p_x = mean(abs(imkDf$kinect_hand_right.x[1:aMTMax] - fkfGuanglongAccelerationModel$att[1,1:aMTMax])),
max_a_x = max(imkDf$imu_acceleration.x[1:aMTMax]),
min_a_x = min(imkDf$imu_acceleration.x[1:aMTMax]),
var_a_x = var(imkDf$imu_acceleration.x[1:aMTMax]),
mean_a_x = mean(imkDf$imu_acceleration.x[1:aMTMax]),
first_a_X = imkDf$imu_acceleration.x[1],
last_a_X = imkDf$imu_acceleration.x[aMTMax],
mean_res_a_x = mean(abs(imkDf$imu_acceleration.x[aMTMax] - fkfGuanglongAccelerationModel$att[3,1:aMTMax])),
max_p_y = max(imkDf$kinect_hand_right.y[1:aMTMax]),
min_p_y = min(imkDf$kinect_hand_right.y[1:aMTMax]),
var_p_y = var(imkDf$kinect_hand_right.y[1:aMTMax]),
mean_p_y = mean(imkDf$kinect_hand_right.y[1:aMTMax]),
first_p_y = imkDf$kinect_hand_right.y[1:aMTMax][1],
last_p_y = imkDf$kinect_hand_right.y[1:aMTMax][aMTMax],
mean_res_p_y = mean(abs(imkDf$kinect_hand_right.y[1:aMTMax] - fkfGuanglongAccelerationModel$att[4,1:aMTMax])),
max_a_y = max(imkDf$imu_acceleration.y),
min_a_y = min(imkDf$imu_acceleration.y),
var_a_y = var(imkDf$imu_acceleration.y),
mean_a_y = mean(imkDf$imu_acceleration.y),
first_a_y = imkDf$imu_acceleration.y[1],
last_a_y = imkDf$imu_acceleration.y[aMTMax],
mean_res_a_y = mean(abs(imkDf$imu_acceleration.y[aMTMax] - fkfGuanglongAccelerationModel$att[6,1:aMTMax])),
max_p_z = max(imkDf$kinect_hand_right.z[1:aMTMax]),
min_p_z = min(imkDf$kinect_hand_right.z[1:aMTMax]),
var_p_z = var(imkDf$kinect_hand_right.z[1:aMTMax]),
mean_p_z = mean(imkDf$kinect_hand_right.z[1:aMTMax]),
first_p_z = imkDf$kinect_hand_right.z[1:aMTMax][1],
last_p_z = imkDf$kinect_hand_right.z[1:aMTMax][aMTMax],
mean_res_p_z = mean(abs(imkDf$kinect_hand_right.z[1:aMTMax] - fkfGuanglongAccelerationModel$att[7,1:aMTMax])),
max_a_z = max(imkDf$imu_acceleration.z),
min_a_z = min(imkDf$imu_acceleration.z),
var_a_z = var(imkDf$imu_acceleration.z),
mean_a_z = mean(imkDf$imu_acceleration.z),
first_a_z = imkDf$imu_acceleration.z[1],
last_a_z = imkDf$imu_acceleration.z[1:aMTMax][aMTMax],
mean_res_a_z = mean(abs(imkDf$imu_acceleration.z[aMTMax] - fkfGuanglongAccelerationModel$att[9,1:aMTMax]))
)
acceleration_kalman_statistics = data.frame(
max_p_x = max(fkfGuanglongAccelerationModel$att[1,1:aMTMax]),
min_p_x = min(fkfGuanglongAccelerationModel$att[1,1:aMTMax]),
var_p_x = var(fkfGuanglongAccelerationModel$att[1,1:aMTMax]),
mean_p_x = mean(fkfGuanglongAccelerationModel$att[1,1:aMTMax]),
first_p_x = fkfGuanglongAccelerationModel$att[1,1],
last_p_x = fkfGuanglongAccelerationModel$att[1,aMTMax],
max_v_x = max(fkfGuanglongAccelerationModel$att[2,1:aMTMax]),
min_v_x = min(fkfGuanglongAccelerationModel$att[2,1:aMTMax]),
var_v_x = var(fkfGuanglongAccelerationModel$att[2,1:aMTMax]),
mean_v_x = mean(fkfGuanglongAccelerationModel$att[2,1:aMTMax]),
first_v_x = fkfGuanglongAccelerationModel$att[2,1],
last_v_x = fkfGuanglongAccelerationModel$att[2,aMTMax],
max_a_x = max(fkfGuanglongAccelerationModel$att[3,1:aMTMax]),
min_a_x = min(fkfGuanglongAccelerationModel$att[3,1:aMTMax]),
var_a_x = var(fkfGuanglongAccelerationModel$att[3,1:aMTMax]),
mean_a_x = mean(fkfGuanglongAccelerationModel$att[3,1:aMTMax]),
first_a_x = fkfGuanglongAccelerationModel$att[3,1],
last_a_x = fkfGuanglongAccelerationModel$att[3,aMTMax],
max_p_y = max(fkfGuanglongAccelerationModel$att[4,1:aMTMax]),
min_p_y = min(fkfGuanglongAccelerationModel$att[4,1:aMTMax]),
var_p_y = var(fkfGuanglongAccelerationModel$att[4,1:aMTMax]),
mean_p_y = mean(fkfGuanglongAccelerationModel$att[4,1:aMTMax]),
first_p_y = fkfGuanglongAccelerationModel$att[4,1],
last_p_y = fkfGuanglongAccelerationModel$att[4,aMTMax],
max_v_y = max(fkfGuanglongAccelerationModel$att[5,1:aMTMax]),
min_v_y = min(fkfGuanglongAccelerationModel$att[5,1:aMTMax]),
var_v_y = var(fkfGuanglongAccelerationModel$att[5,1:aMTMax]),
mean_v_y = mean(fkfGuanglongAccelerationModel$att[5,1:aMTMax]),
first_v_y = fkfGuanglongAccelerationModel$att[5,1],
last_v_y = fkfGuanglongAccelerationModel$att[5,aMTMax],
max_a_y = max(fkfGuanglongAccelerationModel$att[6,1:aMTMax]),
min_a_y = min(fkfGuanglongAccelerationModel$att[6,1:aMTMax]),
var_a_y = var(fkfGuanglongAccelerationModel$att[6,1:aMTMax]),
mean_a_y = mean(fkfGuanglongAccelerationModel$att[6,1:aMTMax]),
first_a_y = fkfGuanglongAccelerationModel$att[6,1],
last_a_y = fkfGuanglongAccelerationModel$att[6,aMTMax],
max_p_z = max(fkfGuanglongAccelerationModel$att[7,1:aMTMax]),
min_p_z = min(fkfGuanglongAccelerationModel$att[7,1:aMTMax]),
var_p_z = var(fkfGuanglongAccelerationModel$att[7,1:aMTMax]),
mean_p_z = mean(fkfGuanglongAccelerationModel$att[7,1:aMTMax]),
first_p_z = fkfGuanglongAccelerationModel$att[7,1],
last_p_z = fkfGuanglongAccelerationModel$att[7,aMTMax],
max_v_z = max(fkfGuanglongAccelerationModel$att[8,1:aMTMax]),
min_v_z = min(fkfGuanglongAccelerationModel$att[8,1:aMTMax]),
var_v_z = var(fkfGuanglongAccelerationModel$att[8,1:aMTMax]),
mean_v_z = mean(fkfGuanglongAccelerationModel$att[8,1:aMTMax]),
first_v_z = fkfGuanglongAccelerationModel$att[8,1],
last_v_z = fkfGuanglongAccelerationModel$att[8,aMTMax],
max_a_z = max(fkfGuanglongAccelerationModel$att[9,1:aMTMax]),
min_a_z = min(fkfGuanglongAccelerationModel$att[9,1:aMTMax]),
var_a_z = var(fkfGuanglongAccelerationModel$att[9,1:aMTMax]),
mean_a_z = mean(fkfGuanglongAccelerationModel$att[9,1:aMTMax]),
first_a_z = fkfGuanglongAccelerationModel$att[9,1],
last_a_z = fkfGuanglongAccelerationModel$att[9,aMTMax]
)
fileConn<-file(paste(params$output_path,"data_position_acceleration_stats.txt", sep = ""))
writeLines(as.yaml(acceleration_measurement_statistics), fileConn)
close(fileConn)
fileConn<-file(paste(params$output_path,"position_kalman_stats.txt", sep = ""))
writeLines(as.yaml(acceleration_kalman_statistics), fileConn)
close(fileConn)
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
imkDf$t[oMTMax]
imkDf$t[1]
imkDfRaw$t
imkDfRaw$t[1]
imkDfRaw$t = imkDfRaw$t - imkDfRaw$t[1]
imkDfRaw$t[1]
imkDfRaw$t[2]
imkDfRaw = read.csv2(paste(params$base_import_path, params$data_import_path, sep=""))
imkDfRaw$t = (imkDfRaw$t.m * 60 + imkDfRaw$t.s + imkDfRaw$t.ms / 1000)
imkDfRaw$t[2]
imkDfRaw$t[1]
imkDf = imkDfRaw[abs(imkDfRaw$kinect_foot_right.x) > 0,]
imkDf$t
imkDf$t[1]
imkDfRaw = read.csv2(paste(params$base_import_path, params$data_import_path, sep=""))
imkDfRaw$t = (imkDfRaw$t.m * 60 + imkDfRaw$t.s + imkDfRaw$t.ms / 1000)
imkDfRaw$t = imkDfRaw$t - imkDfRaw$t[1]
imkDf = imkDfRaw[abs(imkDfRaw$kinect_foot_right.x) > 0,]
imkDf$t[1]
imkDf$t[2]
imkDf$t[300]
imkDf$t[50]
imkDf$t[200]
imkDf$t[150]
imkDf$t[100]
imkDf$t[130]
imkDf$t[120]
imkDf$t[110]
imkDf$t[110:130]
imkDf$imu_yaw[110:130]
imkDf$imu_yaw[120:130]
imkDf$imu_yaw[125:130]
imkDf$imu_yaw[124:130]
imkDf$imu_yaw[123:130]
imkDf$t[123]
imkDf$imu_pitch[123:130]
imkDf$imu_pitch[110:130]
imkDf$imu_roll[110:130]
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
rotationMatrix
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
rotation_matrix
quaternion_rotation_matrix(1,0,0,0)
quaternion_rotation_matrix(0.7,0,0.7,0)
quaternion_rotation_matrix(0.7,0,0.7,0) * 2
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/workbooks/notebook_guanglong.Rmd")
simulationAccelerationMeasurementsAsMatrix
simulatedMax
sim_time
knit_with_parameters("D:/Projekte/Digital-Identity/studies/data_science/workbooks/notebook_guanglong_simulation.Rmd")
knit_with_parameters("D:/Projekte/Digital-Identity/studies/data_science/workbooks/notebook_guanglong_simulation.Rmd")
