vely = initial_acceleration_state[5],
accy = initial_acceleration_state[6],
posz = initial_acceleration_state[7],
velz = initial_acceleration_state[8],
accz = initial_acceleration_state[9])
x_k = list(x_k,x_k,x_k,x_k,x_k,x_k,x_k,x_k,x_k)
generateNextAccelerationFrame <- function(x_k, x_ki){
A_k = processAccelerationModel$Ad
B = diag(x = 0,nrow=9)
uk = matrix(nrow=9, ncol=1, data = 0)
wk = matrix(nrow=9, ncol=1, data = c(
0,
0,
0,
0,
params$process_noise_acceleration_noise_omega_x,
params$process_noise_acceleration_noise_omega_y,
params$process_noise_acceleration_noise_omega_z))
x_ki = A_k %*% x_k + B %*% uk + wk
return(x_ki)
}
Reduce(x = x_k, f=generateNextAccelerationFrame, accumulate = TRUE)
matrix(3,4) + matrix(2,3)
array(2,3)
array(2,3) + array(3,3)
initial_acceleration_state
x_k = initial_acceleration_state
array(initial_acceleration_state, 3)
array(initial_acceleration_state, length(initial_acceleration_state) * 2)
list(3,4)
Reduce(x = bla, f=generateNextAccelerationFrame, accumulate = TRUE)
x_k = matrix(initial_acceleration_state)
bla = list(x_k, x_k, x_k)
Reduce(x = bla, f=generateNextAccelerationFrame, accumulate = TRUE)
rep(x_k,2)
rep(x = x_k)
append(3, x_k)
bla
bla.append(x_k)
bla = c(bla, x_k)
bla
x_k
lapply(1:3,x_k)
lapply(1:3,append,x_k)
lapply(1:1,append,x_k)
lapply(5,append,x_k)
lapply(1:10,append,x_k)
bla = list(x_k, x_k, x_k)
bla
lapply(1:10,append,x_k)
lapply(1:10,append,x_k)[1,]
lapply(1:10,append,x_k)[,]
lapply(1:10,append,x_k)[,1]
lapply(1:10,append,x_k)[1]
lapply(1:10,append,x_k)[1,]
lapply(1:10,append,x_k)[][1]
lapply(1:10,append,x_k)[][2]
lapply(1:10,append,x_k)[][3]
lapply(1:10,append,x_k)[][3:2]
lapply(1:10,append,x_k)
lapply(1:10,x_k,x_k)
lapply(1:10,return,x_k)
lapply(1:10,return(x_k),x_k)
lapply(1:10,function(x)return(x),x_k)
lapply(1:10,function(x) return(x),x_k)
lapply(1:10,function() return(x),x_k)
justfuckingreturn(x){
justfuckingreturn <- function(x){
return(x)
}
lapply(1:10,justfuckingreturn,x_k)
lapply(1:10,justfuckingreturn,x_k[1])
justfuckingreturn <- function(x,bla){
return(x)
}
lapply(1:10,justfuckingreturn,x_k)
justfuckingreturn <- function(x,bla){
return(bla)
}
lapply(1:10,justfuckingreturn,x_k)
justReturn <- function(index,frame){
return(frame)
}
justReturn <- function(index,frame){
return(frame)
}
lapply(1:10,justreturn,x_k)
lapply(1:10,justReturn,x_k)
Reduce(x = lapply(1:10,justReturn,x_k), f=generateNextAccelerationFrame, accumulate = TRUE)
Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextAccelerationFrame, accumulate = TRUE)
generateNextAccelerationFrame <- function(x_k, x_ki){
A_k = processAccelerationModel$Ad
B = diag(x = 0,nrow=9)
uk = matrix(nrow=9, ncol=1, data = 0)
wk = matrix(nrow=9, ncol=1, data = c(
0,
0,
0,
0,
0,
0,
params$process_noise_acceleration_noise_omega_x,
params$process_noise_acceleration_noise_omega_y,
params$process_noise_acceleration_noise_omega_z))
x_ki = A_k %*% x_k + B %*% uk + wk
return(x_ki)
}
x_k = matrix(initial_acceleration_state)
Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextAccelerationFrame, accumulate = TRUE)
x_km = matrix(data = as.numeric(initial_acceleration_state))
simulationData = Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextAccelerationFrame, accumulate = TRUE)
simulationAccelerationData = Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextAccelerationFrame, accumulate = TRUE)
generateNextOrientationFrame <- function(x_k, x_ki){
A_k = processOrientationModel$Ad
B = diag(x = 0,nrow=7)
uk = matrix(nrow=7, ncol=1, data = 0)
wk = matrix(nrow=7, ncol=1, data = c(
0,
0,
0,
0,
params$process_noise_orientation_angular_velocity_sigma_x,
params$process_noise_orientation_angular_velocity_sigma_y,
params$process_noise_orientation_angular_velocity_sigma_z))
x_ki = A_k %*% x_k + B %*% uk + wk
return(x_ki)
}
x_k = matrix(initial_orientation_state)
simulationOrientationData = Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextOrientationFrame, accumulate = TRUE)
x_k
generateNextOrientationFrame <- function(x_k, x_ki){
A_k = processOrientationModel$Ad
B = diag(x = 0,nrow=7)
uk = matrix(nrow=7, ncol=1, data = 0)
wk = matrix(nrow=7, ncol=1, data = c(
0,
0,
0,
0,
params$process_noise_orientation_angular_velocity_sigma_x,
params$process_noise_orientation_angular_velocity_sigma_y,
params$process_noise_orientation_angular_velocity_sigma_z))
x_ki = A_k %*% x_k + B %*% uk + wk
return(x_ki)
}
x_k = matrix(initial_orientation_state)
simulationOrientationData = Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextOrientationFrame, accumulate = TRUE)
processOrientationModel$Ad
processOrientationModel$Ad %*% x_k
processOrientationModel$Ad * x_k
x_k = as.matrix(initial_orientation_state)
simulationOrientationData = Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextOrientationFrame, accumulate = TRUE)
as.matrix(initial_orientation_state)
matrix(initial_orientation_state)
x_k = matrix(initial_orientation_state)
simulationOrientationData = Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextOrientationFrame, accumulate = TRUE)
x_k
as.maatrix(x_k)
as.matrix(x_k)
x_k = as.matrix(matrix(initial_orientation_state))
simulationOrientationData = Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextOrientationFrame, accumulate = TRUE)
processOrientationModel$Ad
type(processOrientationModel$Ad)
typeof((processOrientationModel$Ad))
typeof(x_k)
initial_acceleration_state
initial_acceleration_state
initial_orientation_state
as.array(initial_orientation_state)
c(initial_orientation_state)
c(data=initial_orientation_state)
as.double(initial_orientation_state)
x_k = as.double(initial_orientation_state)
simulationOrientationData = Reduce(x = lapply(1:10, justReturn,x_k), f=generateNextOrientationFrame, accumulate = TRUE)
simulationOrientationData
lapply(1:aMTMax,acceleration_transition_at_index)
acceleration_transition_at_index(1)
acceleration_transition_at_index(2)
acceleration_transition_at_index(5)
acceleration_transition_at_index(10)
simulatedfkfGuanglongAccelerationModel = fkf(
a0 = processAccelerationModel$x[,1],
P0  = processAccelerationModel$P,
dt = matrix(data = 0, nrow = 9, ncol = 1),
ct = matrix(data = 0, nrow = 6, ncol = 1),
GGt = diag(nrow = 6, ncol = 6),
Zt = processAccelerationModel$H,
Tt = acceleration_transition_at_index(1),
HHt = processAccelerationModel$Q,
yt = matrix(data = c(
imkDf$kinect_hand_right.x[1:aMTMax],
imkDf$kinect_hand_right.y[1:aMTMax],
imkDf$kinect_hand_right.z[1:aMTMax],
imkDf$imu_acceleration.x[1:aMTMax],
imkDf$imu_acceleration.y[1:aMTMax],
imkDf$imu_acceleration.z[1:aMTMax]
), nrow = 6, ncol = aMTMax)
)
simulatedfkfGuanglongAccelerationModel
plot(simulationAccelerationData ~ 1:10, pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
imkDf$t[1:aMTMax]
1:10
plot(simulationAccelerationData[7] ~ 1:10, pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
plot(simulationAccelerationData[7] ~ 1:10, pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
simulationAccelerationData[7]
simulationAccelerationData[7,]
simulationAccelerationData[,7]
simulationAccelerationData[7]
simulationAccelerationData
simulationAccelerationDataimkDf$kinect_hand_right.x[1:aMTMax]
imkDf$kinect_hand_right.x[1:aMTMax]
simulationAccelerationData[7]
unlist(simulationAccelerationData)
unlist(simulationAccelerationData[7])
simulationAccelerationData[7]
as.matrix(simulationAccelerationData)
unlist(simulationAccelerationData)
as.matrix(unlist(simulationAccelerationData))
as.matrix(unlist(simulationAccelerationData), nrow = 9, ncol=10)
as.matrix(data = unlist(simulationAccelerationData), nrow = 9, ncol=10)
matrix(data = unlist(simulationAccelerationData), nrow = 9, ncol=10)
simulatedDataAsMatrix = matrix(data = unlist(simulationAccelerationData), nrow = 9, ncol=10)
simulatedDataAsMatrix[,7]
simulatedDataAsMatrix[7,]
plot(simulatedDataAsMatrix[7,] ~ 1:10, pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
plot(simulatedDataAsMatrix[7,] ~ 1:10)
plot(simulatedDataAsMatrix[7,] ~ 1:9, pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
simulatedDataAsMatrix[7,]
as.double(simulatedDataAsMatrix[7,])
1:10
plot(simulatedDataAsMatrix[7,] ~ c(1:10(), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
plot(simulatedDataAsMatrix[7,] ~ c(1:10, pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
plot(simulatedDataAsMatrix[7,] ~ c(1:10), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
plot(simulatedDataAsMatrix[7,] ~ c(1:10), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:10, rev(1:10)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] + simulatedfkfGuanglongAccelerationModel$att[1,1:aMTMax], rev(simulatedfkfGuanglongAccelerationModel$att[1,1:aMTMax] - simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:aMTMax] )),
col = "lightsteelblue",
border = NA)
plot(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
simulatedMax = 10
generateNextAccelerationFrame <- function(x_k, x_ki){
A_k = processAccelerationModel$Ad
B = diag(x = 0,nrow=9)
uk = matrix(nrow=9, ncol=1, data = 0)
wk = matrix(nrow=9, ncol=1, data = c(
0,
0,
0,
0,
0,
0,
params$process_noise_acceleration_noise_omega_x,
params$process_noise_acceleration_noise_omega_y,
params$process_noise_acceleration_noise_omega_z))
x_ki = A_k %*% x_k + B %*% uk + wk
return(x_ki)
}
x_k = matrix(initial_acceleration_state)
simulationAccelerationData = Reduce(x = lapply(1:simulatedMax, justReturn,x_k), f=generateNextAccelerationFrame, accumulate = TRUE)
simulatedfkfGuanglongAccelerationModel = fkf(
a0 = processAccelerationModel$x[,1],
P0  = processAccelerationModel$P,
dt = matrix(data = 0, nrow = 9, ncol = 1),
ct = matrix(data = 0, nrow = 6, ncol = 1),
GGt = diag(nrow = 6, ncol = 6),
Zt = processAccelerationModel$H,
Tt = acceleration_transition_at_index(1),
HHt = processAccelerationModel$Q,
yt = matrix(data = c(
imkDf$kinect_hand_right.x[1:aMTMax],
imkDf$kinect_hand_right.y[1:aMTMax],
imkDf$kinect_hand_right.z[1:aMTMax],
imkDf$imu_acceleration.x[1:aMTMax],
imkDf$imu_acceleration.y[1:aMTMax],
imkDf$imu_acceleration.z[1:aMTMax]
), nrow = 6, ncol = aMTMax)
)
simulatedDataAsMatrix = matrix(data = unlist(simulationAccelerationData), nrow = 9, ncol=simulatedMax)
plot(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[1,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[1,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[7,1:aMTMax] ~ c(1:simulatedMax), col = "blue")
plot(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[1,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[1,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(imkDf$rotated_x_acceleration[1:simulatedMax] ~ 1:10)
plot(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[1,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[1,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_x state", "imu x"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[1,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[1,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[1,1,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_x state", "simulated x"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[7,7,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[7,7,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_x state", "simulated x"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax), pch  = 20, main = "a_y", ylab = "a_y",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_x state", "simulated x"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax), pch  = 20, main = "a_y", ylab = "a_y",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_x state", "simulated x"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax), pch  = 20, main = "a_z", ylab = "a_z",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_z state", "simulated z"), lwd = 3, col = c("blue", "black"))
simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax]
plot(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[7,7,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[7,7,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_x state", "simulated x"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax), pch  = 20, main = "a_y", ylab = "a_y",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_y state", "simulated y"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax), pch  = 20, main = "a_z", ylab = "a_z",xlab="time", type='l')
plot(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax), pch  = 20, main = "a_z", ylab = "a_z",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
1:simulatedMax
plot(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax), pch  = 20, main = "a_z", ylab = "a_z",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_z state", "simulated az"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax), pch  = 20, main = "a_y", ylab = "a_y",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_y state", "simulated ay"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax), pch  = 20, main = "a_y", ylab = "a_y",xlab="time", type='l',  ylim = c(-5, 5))
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_y state", "simulated ay"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax), pch  = 20, main = "a_y", ylab = "a_y",xlab="time", type='l',  ylim = c(-2, 2))
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_y state", "simulated ay"), lwd = 3, col = c("blue", "black"))
processAccelerationModel$R
generateNextAccelerationMeasurement <- function(x_k){
H = processAccelerationModel$H
v_k = processAccelerationModel$R
z_k = H %*% x_k + v_k
return(z_k)
}
simuationAccelerationMeasurements = lapply(simulationAccelerationData, generateNextAccelerationMeasurement)
simuationAccelerationMeasurements = lapply(simulationAccelerationData, generateNextAccelerationMeasurement)
simuationAccelerationMeasurements
simulatedDataAsMatrix = matrix(data = unlist(simulationAccelerationData), nrow = 9, ncol=simulatedMax)
simuationAccelerationMeasurementsAsMatrix = matrix(data = unlist(generateNextAccelerationMeasurement), nrow = 9, ncol=simulatedMax)
simuationAccelerationMeasurementsAsMatrix = matrix(data = unlist(generateNextAccelerationMeasurement), nrow = 6, ncol=simulatedMax)
simuationAccelerationMeasurementsAsMatrix = matrix(data = unlist(generateNextAccelerationMeasurement), nrow = 6, ncol=simulatedMax)
simuationAccelerationMeasurements
simulationAccelerationData
simuationAccelerationMeasurements
simulationAccelerationData
unlist(generateNextAccelerationMeasurement)
simuationAccelerationMeasurementsAsMatrix = matrix(data = unlist(simuationAccelerationMeasurements), nrow = 6, ncol=simulatedMax)
simuationAccelerationMeasurementsAsMatrix[1,]
simuationAccelerationMeasurementsAsMatrix[,1]
simuationAccelerationMeasurementsAsMatrix[1,]
simulatedfkfGuanglongAccelerationModel = fkf(
a0 = processAccelerationModel$x[,1],
P0  = processAccelerationModel$P,
dt = matrix(data = 0, nrow = 9, ncol = 1),
ct = matrix(data = 0, nrow = 6, ncol = 1),
GGt = diag(nrow = 6, ncol = 6),
Zt = processAccelerationModel$H,
Tt = acceleration_transition_at_index(1),
HHt = processAccelerationModel$Q,
yt = matrix(data = c(
simuationAccelerationMeasurementsAsMatrix[1,],
simuationAccelerationMeasurementsAsMatrix[2,],
simuationAccelerationMeasurementsAsMatrix[3,],
simuationAccelerationMeasurementsAsMatrix[4,],
simuationAccelerationMeasurementsAsMatrix[5,],
simuationAccelerationMeasurementsAsMatrix[6,]
), nrow = 6, ncol = aMTMax)
)
plot(simuationAccelerationMeasurementsAsMatrix[4,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[7,7,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[7,7,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simuationAccelerationMeasurementsAsMatrix[4,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_x state", "simulated ax"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax), pch  = 20, main = "a_x", ylab = "a_x",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[7,7,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[7,7,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[7,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[7,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_x state", "simulated ax"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax), pch  = 20, main = "a_y", ylab = "a_y",xlab="time", type='l',  ylim = c(-2, 2))
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[8,8,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[8,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[8,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_y state", "simulated ay"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax), pch  = 20, main = "a_z", ylab = "a_z",xlab="time", type='l')
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_z state", "simulated az"), lwd = 3, col = c("blue", "black"))
plot(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax), pch  = 20, main = "a_z", ylab = "a_z",xlab="time", type='l', ylim = c(-2, 2))
polygon(
x = c(1:simulatedMax, rev(1:simulatedMax)),
y = c(simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] + simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax], rev(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] - simulatedfkfGuanglongAccelerationModel$Ptt[9,9,1:simulatedMax] )),
col = "lightsteelblue",
border = NA)
lines(simulatedfkfGuanglongAccelerationModel$att[9,1:simulatedMax] ~ c(1:simulatedMax), col = "blue")
lines(simulatedDataAsMatrix[9,] ~ c(1:simulatedMax))
legend("bottomright", legend = c("a_z state", "simulated az"), lwd = 3, col = c("blue", "black"))
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/notebook_guanglong.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/notebook_guanglong.Rmd", encoding = "UTF-8")
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/notebook_guanglong.Rmd", encoding = "UTF-8")
library(dplyr)
library(RMThreshold)
library(ggplot2)
library(RSpincalc)
library(reshape2)
library(LaplacesDemon)
library(Rcpp)
library(FKF)
knit_with_parameters("D:/Projekte/Digital-Identity/data_science/notebook_guanglong.Rmd", encoding = "UTF-8")
CMD check
install.packages("testthat")
library(testthat)
